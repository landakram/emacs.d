#+TITLE: Mark's Emacs Config
#+OPTIONS: toc:2 num:nil ^:nil

* Introduction

Welcome to my emacs config!

* Prelude

First, let's take care of some startup stuff.

** Remove the startup message

I don't like the startup message, so let's get rid of it.

#+BEGIN_SRC emacs-lisp

(setq inhibit-startup-message t)

#+END_SRC

** Set the Custom file

Let's set ~custom-file~, which emacs writes to automatically.

#+BEGIN_SRC emacs-lisp

(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file)

#+END_SRC
* Packages

** Set up ~package.el~

#+BEGIN_SRC emacs-lisp

(require 'package)
(setq package-archives
      '(("gnu" . "http://elpa.gnu.org/packages/")
        ("org" . "http://orgmode.org/elpa/")
        ("melpa" . "http://melpa.org/packages/")
        ("marmalade" . "http://marmalade-repo.org/packages/")))

(package-initialize)

#+END_SRC

** Install ~use-package~

~use-package~ is used for the rest of the config. It lets me define installable packages and configure them in the same block.

#+BEGIN_SRC emacs-lisp

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile
  (require 'use-package))

#+END_SRC

#+RESULTS:
: diminish

** Install ~diminish~

We also install ~diminish~, because ~use-package~ depends on it. ~diminish~ lets you hide minor modes from the mode-line.

#+BEGIN_SRC emacs-lisp

(unless (package-installed-p 'diminish)
  (package-install 'diminish))

(require 'diminish)

#+END_SRC

Now, we diminish some modes (I can't figure out where they are loaded):

#+BEGIN_SRC emacs-lisp
  (global-auto-revert-mode)
  (diminish 'auto-revert-mode)
#+END_SRC

#+RESULTS:
|   |
** Try packages without installing

#+BEGIN_SRC emacs-lisp
  (use-package try
    :ensure t)
#+END_SRC

#+RESULTS:
** Better interface for packages

Brought to you by Paradox:

#+BEGIN_SRC emacs-lisp
  (use-package paradox
    :ensure t)
#+END_SRC

#+RESULTS:
** Start up maximized

#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist '(fullscreen . maximized))
#+END_SRC
* General Configuration

Let's configure the editor to our liking.

** Symlinks

Follow symlinks without prompting me.

#+BEGIN_SRC emacs-lisp

  (setq vc-follow-symlinks t)

#+END_SRC

** Ignore files

Life's too short to see this many files in dired / projectile / etc.

#+BEGIN_SRC emacs-lisp

  (use-package ignoramus
    :ensure t
    :config
    (ignoramus-setup))

#+END_SRC

#+RESULTS:
: t

** Use org for the scratch buffer

#+BEGIN_SRC emacs-lisp
  (setq initial-major-mode 'org-mode)
  (setq initial-scratch-message "\
  # This buffer is for notes you don't want to save.")
#+END_SRC

#+RESULTS:
: # This buffer is for notes you don't want to save.

** Change "yes or no" to "y or n"

#+BEGIN_SRC emacs-lisp 

(defalias 'yes-or-no-p 'y-or-n-p)

#+END_SRC

** Enable flycheck

Flycheck is an on-the-fly syntax checker.

#+BEGIN_SRC emacs-lisp 

  (use-package flycheck
    :ensure t
    :diminish flycheck-mode
    :config
    (global-flycheck-mode)

    (flycheck-add-mode 'javascript-eslint 'js2-mode)
    (flycheck-add-mode 'javascript-eslint 'js-mode)

    ;; Disable syntax checking on new-line for emacs lisp, since for some reason 
    ;; it is really slow
    (add-hook 'emacs-lisp-mode-hook
              (lambda ()
                (setq-local flycheck-check-syntax-automatically '(idle-check mode-enabled save))))

    (setq-default flycheck-disabled-checkers
                  (append flycheck-disabled-checkers
                          '(javascript-jshint
                            emacs-lisp-checkdoc))))

#+END_SRC

#+RESULTS:
: t

** Disable bell ring

#+BEGIN_SRC emacs-lisp 

(setq ring-bell-function 'ignore)

#+END_SRC

** Better defaults

#+BEGIN_SRC emacs-lisp 

  (use-package better-defaults
    :ensure t)

#+END_SRC

#+RESULTS:
|   |

** Better search

I use ~ag~ religiously on the command line. Let's use it in emacs too.

#+BEGIN_SRC emacs-lisp 

(use-package ag
  :ensure t)

#+END_SRC

** Visual fill column

Visually wraps lines according to the value of ~fill-column~. Unlike ~fill-column~, ~visual-fill-column~ does not *actually* wrap text in the file. It just displays it as wrapped.

#+BEGIN_SRC emacs-lisp 

  ;; (use-package visual-fill-column
  ;;   :ensure t
  ;;   :diminish visual-line-mode
  ;;   :config
  ;;   (add-hook 'text-mode-hook 'visual-fill-column-mode)
  ;;   (global-visual-line-mode))

#+END_SRC

#+RESULTS:
: t
** which-key

Remembering keyboard shortcuts is hard. which-key pops up a buffer reminding me of shortcuts when I start typing them.

#+BEGIN_SRC emacs-lisp 

(use-package which-key
  :ensure t
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 0.5)
  (which-key-mode))

#+END_SRC

#+RESULTS:
: t

** Disable file locking

The bizarre symlink-based file locking isn't really necessary for me since I never have more than one instance of emacs open. It causes problems with tools that watch directories for files, so let's disable it.

#+BEGIN_SRC emacs-lisp
(setq create-lockfiles nil)
#+END_SRC

** Fix the PATH variable

This sets up emacs to inherit commands from ~$PATH~. Without it, some commands that are available in the shell would not be available in emacs.

#+BEGIN_SRC emacs-lisp 

    (use-package exec-path-from-shell
      :ensure t
      :config
      (exec-path-from-shell-initialize)
      (exec-path-from-shell-copy-env "SSH_AGENT_PID")
      (exec-path-from-shell-copy-env "SSH_AUTH_SOCK"))

    ;; (defun set-exec-path-from-shell-PATH ()
    ;;   (let ((path-from-shell (shell-command-to-string "env TERM=vt100 /bin/zsh -i -c 'echo $PATH'")))
    ;;     (setenv "PATH" path-from-shell)
    ;;     (setq exec-path (split-string path-from-shell path-separator))))

    ;; (when window-system (set-exec-path-from-shell-PATH))

#+END_SRC

#+RESULTS:
: t

** Make gpg-agent work

This function will load ~/.gpg-agent-info and source its contents into ~GPG_AGENT_INFO~.

I need this to pull mail for m4ue.

#+BEGIN_SRC emacs-lisp
  (defun my/gpg-agent ()
    "Load your gpg-agent.env file in to the environment

  This is extra useful if you use gpg-agent with --enable-ssh-support"
    (interactive)
    (let ((home (getenv "HOME"))
          (old-buffer (current-buffer)))
      (with-temp-buffer
        (insert-file-contents (concat home "/.gpg-agent-info"))
        (goto-char (point-min))
        (setq case-replace nil)
        (replace-regexp "\\(.*\\)=\\(.*\\)" "(setenv \"\\1\" \"\\2\")")
        (eval-buffer)))
    (message (getenv "GPG_AGENT_INFO")))

  (run-with-idle-timer 60 t 'my/gpg-agent)
  (my/gpg-agent)
#+END_SRC

#+RESULTS:
: /tmp/gpg-slIax0/S.gpg-agent:787:1
** Theme
*** Change the Mode Line

This mode line is pretty.

#+BEGIN_SRC emacs-lisp 

  (use-package smart-mode-line
    :ensure t
    :config
    (setq sml/theme 'respectful)
    (sml/setup))

#+END_SRC

#+RESULTS:
: t

#+RESULTS:
*** Display time in modeline

#+BEGIN_SRC emacs-lisp
(display-time-mode 1)
#+END_SRC

#+RESULTS:
: t

*** Change the theme

The "Monokai" themes look great.

#+BEGIN_SRC emacs-lisp 

  (use-package monokai-theme
    :ensure t
    :config
    (setq monokai-use-variable-pitch nil)
    (load-theme 'monokai t))


  ;; (use-package color-theme-sanityinc-tomorrow
  ;;   :ensure t
  ;;   :config
  ;;   (color-theme-sanityinc-tomorrow-eighties))

#+END_SRC

#+RESULTS:
: t

*** Per-buffer themes

I'd like to use a light theme for email and org mode.

It's commented out right now because it looks terrible.

#+BEGIN_SRC emacs-lisp
  ;; (use-package color-theme
  ;;   :ensure t)


  ;; (use-package load-theme-buffer-local
  ;;   :ensure t
  ;;   :config
  ;;   (add-hook 'org-mode-hook (lambda ()
  ;;                              (load-theme-buffer-local
  ;;                               'leuven
  ;;                               (current-buffer)))))

  ;; (use-package color-theme-buffer-local
  ;;   :ensure t)
#+END_SRC

#+RESULTS:

** ~delete-this-file~

#+BEGIN_SRC emacs-lisp
  (defun delete-this-file ()
    "Kill the current buffer and deletes the file it is visiting."
    (interactive)
    (let ((filename (buffer-file-name)))
      (when filename
        (when (y-or-n-p (format "Are you sure you want to delete %s?" filename))
          (if (vc-backend filename)
              (vc-delete-file filename)
            (progn
              (delete-file filename)
              (message "Deleted file %s" filename)
              (kill-buffer)))))))
#+END_SRC

#+RESULTS:
: delete-this-file

** Load host specific configuration

#+BEGIN_SRC emacs-lisp
  (let ((host-specific-config (expand-file-name (concat "~/.emacs.d/site-lisp/" (system-name) ".el")))) 
    (when (file-readable-p host-specific-config)
      (load-file host-specific-config)))
#+END_SRC

* UI
** Window / popup management

Always focus the cursor in help windows.

#+BEGIN_SRC emacs-lisp
  (setq help-window-select t)
#+END_SRC

#+RESULTS:
: t
** Scrolling

Make scrolling behavior more like vim:

#+BEGIN_SRC emacs-lisp
  (use-package smooth-scrolling
    :ensure t
    :config
    (smooth-scrolling-mode 1)
    (setq smooth-scroll-margin 5))
#+END_SRC

#+RESULTS:
: t

** Helm

#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure t
    :diminish helm-mode
    :config
    (require 'helm-config)
    (helm-mode 1)
    (global-set-key (kbd "M-x") 'helm-M-x)
    (global-set-key (kbd "M-y") 'helm-show-kill-ring)
    (global-set-key (kbd "C-x b") 'helm-mini)
    (global-set-key (kbd "C-h a") 'helm-apropos)
    (setq helm-buffer-max-length nil)
    (helm-autoresize-mode t)

    (require 'helm-imenu))

  (use-package helm-ag
    :ensure t)

  (use-package helm-projectile
    :ensure t
    :config
    (helm-projectile-on))

#+END_SRC

#+RESULTS:
: t


* Keybindings
** General keybindings
*** Increase and decrease text size

#+BEGIN_SRC emacs-lisp 

(define-key global-map (kbd "C-+") 'text-scale-increase)
(define-key global-map (kbd "C--") 'text-scale-decrease)

#+END_SRC

** Evil Mode

#+BEGIN_SRC emacs-lisp 

  (defun split-window-right-and-focus ()
    (interactive)
    (split-window-right)
    (other-window 1))

  (defun split-window-below-and-focus ()
    (interactive)
    (split-window-below)
    (other-window 1))

  (use-package evil
    :ensure t
    :diminish evil-mode
    :diminish undo-tree-mode
    :init
    ;; (setq evil-want-C-u-scroll t)
    :config
    ;; Make movement keys work over visual lines
    (define-key evil-normal-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
    (define-key evil-normal-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)
    (define-key evil-motion-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
    (define-key evil-motion-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)

    ;; Make * search over whole symbols instead of words. This means 
    ;; it will match "this-variable" rather than just "this".
    (setq-default evil-symbol-word-search 1)
    (setq-default evil-want-fine-undo t)

    ;; Make insert mode just like regular emacs
    (setq evil-insert-state-map (make-sparse-keymap))
    (define-key evil-insert-state-map (kbd "<escape>") 'evil-normal-state)


    (setq evil-move-cursor-back nil)

    ;; Search by symbol instead of word. This matches things like
    ;; "this-variable", instead of just "this". 
    (setq evil-symbol-word-search 1)

    (define-key evil-normal-state-map (kbd "gf")
      (lambda () 
        (interactive)
        (if current-prefix-arg
          (dumb-jump-go-other-window)
          (dumb-jump-go))))

    (define-key evil-normal-state-map (kbd "gb") 'dumb-jump-back)

    (define-key evil-normal-state-map "f" 'avy-goto-word-or-subword-1)
    (define-key evil-normal-state-map (kbd "C-k") (lambda ()
                                                    (interactive)
                                                    (evil-scroll-up nil)))
    (define-key evil-normal-state-map (kbd "C-j") (lambda ()
                                                    (interactive)
                                                    (evil-scroll-down nil)))


    ;; Use swiper for search
    ;; (define-key evil-normal-state-map "/" 'swiper)

    (evil-mode 1)

    (use-package evil-surround
      :ensure t
      :diminish evil-surround-mode
      :config
      (global-evil-surround-mode 1))

    (use-package evil-magit
      :ensure t)

    (use-package evil-matchit
      :ensure t
      :config
      (global-evil-matchit-mode 1)))

#+END_SRC

#+RESULTS:
: t

** General

General.el is like evil-leader, but lets you define multiple leader keys / prefixes.

#+BEGIN_SRC emacs-lisp
  (use-package general
    :ensure t
    :config
    (setq general-default-states '(normal motion))

    (general-define-key :prefix "SPC b"
                        "" '(:ignore t :which-key "buffers")
                        "b" 'helm-mini
                        "k" 'kill-this-buffer
                        "q" 'delete-window)

    ;; Bookmarks
    (general-define-key :prefix "SPC bo"
                        "" '(:ignore t :which-key "b[o]okmarks")
                        "c" '(:which-key "config-file"
                             :def (lambda () (interactive) (find-file "~/.emacs.d/config.org")))
                        "m" '(:which-key "mu4e"
                             :command 'mu4e)
                        "o" '(:which-key "org-file"
                             :def (lambda () (interactive) (find-file "~/org/projects.org"))))

    (general-define-key :prefix "SPC w"
                        "" '(:ignore t :which-key "windows")
                        "d" 'ace-delete-window
                        "j" 'ace-window)

    (general-define-key :prefix "SPC"
                        "|" 'split-window-right-and-focus
                        "-" 'split-window-below-and-focus)

    (general-define-key :prefix "SPC"
                        "a" 'org-agenda
                        "c" 'org-capture)

    (general-define-key :prefix "SPC"
                        "g" 'magit-status)

    (general-define-key :prefix "SPC"
                        "x" 'helm-M-x)

    ;; Help
    (general-define-key :prefix "SPC"
                        "h" (general-simulate-keys "C-h"))

    (general-define-key :prefix "SPC f"
                        "" '(:ignore t :which-key "files")
                        "f" 'helm-find-files
                        "d" 'delete-this-file
                        "s" 'save-buffer)

    (general-define-key :states '(emacs normal motion)
                        "C-x k" 'kill-this-buffer)

    (general-define-key :states '(emacs) :keymaps 'org-agenda-mode-map
                        "j" 'org-agenda-next-line
                        "k" 'org-agenda-previous-line)

    (general-define-key :states '(normal) :keymaps 'outline-minor-mode-map
                        "TAB" 'outline-cycle
                        "<backtab>" 'outshine-cycle-buffer)

    (general-define-key :prefix "SPC"
                        :states '(normal)
                        :keymaps 'outline-minor-mode-map
                        "n" 'outshine-narrow-to-subtree
                        "N" 'widen)

    (general-define-key :states '(normal)
                        :keymaps 'outline-minor-mode-map
                        "M-j" 'outline-next-visible-heading
                        "M-k" 'outline-previous-visible-heading
                        "M-K" 'outline-backward-same-level
                        "M-J" 'outline-forward-same-level)

    (general-define-key :prefix "SPC p"
                        "" '(:ignore t :which-key "projects")
                        "p" 'projectile-switch-project
                        "f" 'projectile-find-file
                        "a" 'helm-projectile-ag
                        "t" 'projectile-test-project))
#+END_SRC

#+RESULTS:
: t

* Navigating
** Projectile
Projectile lets me switch between projects really easily. I set it up to default to ~projectile-commander~, which gives me options to choose what I want to do with a project once I open it.

#+BEGIN_SRC emacs-lisp 

  (use-package projectile
    :ensure t
    :diminish projectile-mode
    :config
    (setq projectile-enable-caching t)
    (projectile-global-mode)
    (setq projectile-completion-system 'helm)
    (setq projectile-switch-project-action 'projectile-commander)

    ;; Clear out all commander commands but the help item.
    (setq projectile-commander-methods (list (car projectile-commander-methods)))
    ;; (delete-if (lambda (el)
    ;;              (member (car el) '(?d ?a ?g)))
    ;;            projectile-commander-methods)


    ;; Use ag instead of projectile's default of find.
    ;; This lets me use .agignore files instead of projectile's
    ;; ignore file, which has never worked successfully for me.
    (setq projectile-generic-command
          (concat "ag -0 -l --nocolor"
                  (mapconcat #'identity (cons "" projectile-globally-ignored-directories) " --ignore-dir=")))

    ;; Workaround for tramp slowness (https://emacs.stackexchange.com/questions/17543/tramp-mode-is-much-slower-than-using-terminal-to-ssh)
    (setq projectile-mode-line "Projectile")

    (def-projectile-commander-method ?d
      "Open project root in dired"
      (projectile-dired)))

    (def-projectile-commander-method ?a
      "Full text search in the project."
      (helm-projectile-ag))

    (def-projectile-commander-method ?e
      "Open an [e]shell in the project root."
      (projectile-run-eshell))

    (def-projectile-commander-method ?f
      "Find files in the project."
      (projectile-find-file))

    (def-projectile-commander-method ?g
      "Open project root in magit"
      (projectile-vc))

#+END_SRC

** Avy
Avy lets me jump around buffers and windows with hints.

#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :config
    ;; Favor home-row and surrounding keys
    (setq avy-keys
          '(?h ?j ?k ?l ?a ?s ?d ?f ?g ?y ?u ?i ?o ?p ?q ?w ?e ?r ?t ?n ?m ?z ?x ?c ?v ?b)))
#+END_SRC

#+RESULTS:
: t
** Ace-Window
Ace window is like avy but for windows.

#+BEGIN_SRC emacs-lisp
    (use-package ace-window
      :ensure t
      :config
      (setq aw-keys '(?h ?j ?k ?l ?a ?s ?d ?f ?g ?y ?u ?i ?o ?p ?q ?w ?e ?r ?t ?n ?m ?z ?x ?c ?v ?b)))
#+END_SRC

#+RESULTS:
: t

ace-link is like ace-window but for links.

#+BEGIN_SRC emacs-lisp
  (use-package ace-link
    :ensure t
    :config
    (ace-link-setup-default))
#+END_SRC

#+RESULTS:
: t

** Winner mode
It records window configuration and lets you undo: 

#+BEGIN_SRC emacs-lisp
(winner-mode 1)
#+END_SRC
** Expand-region

#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :config
    (global-set-key (kbd "C-=") 'er/expand-region))
#+END_SRC

#+RESULTS:
: t
** Mouse scrolling

Reduce the amount that the mouse scrolls.

#+BEGIN_SRC emacs-lisp
(setq mouse-wheel-scroll-amount '(3 ((shift) . 1) ((control) . nil)))
(setq mouse-wheel-progressive-speed nil)
#+END_SRC

#+RESULTS:
** imenu

#+BEGIN_SRC emacs-lisp
  (general-define-key :states '(normal)
                      "F" 'helm-semantic-or-imenu)
#+END_SRC
** Tags / dumb-jump

#+BEGIN_SRC emacs-lisp
  (use-package dumb-jump
    :ensure t
    :config
    (setq dumb-jump-selector 'helm)
    (setq dumb-jump-force-searcher 'ag))
#+END_SRC
** Tramp

#+BEGIN_SRC emacs-lisp
(setq tramp-verbose 6)
(setq tramp-default-method "ssh")
(setq tramp-ssh-controlmaster-options "")
(add-to-list 'backup-directory-alist
             (cons tramp-file-name-regexp nil))
(setq tramp-auto-save-directory temporary-file-directory)
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; TODO: unfortunately this doesn't quite work
  (defun tail-this-file ()
    (interactive)
    (dired-do-shell-command "tail -f * &" nil (dired-get-marked-files)))
#+END_SRC
*** Disable projectile for remote files
#+BEGIN_SRC emacs-lisp
(defadvice projectile-project-root (around ignore-remote first activate)
    (unless (file-remote-p default-directory) ad-do-it))
#+END_SRC
*** Use bash for remote shell commands

#+BEGIN_SRC emacs-lisp
  (defun my/shell-set-hook ()
    (when (file-remote-p (buffer-file-name))
      (let ((vec (tramp-dissect-file-name (buffer-file-name))))
       ;; Please change "some-hostname" to your remote hostname
        (setq-local shell-file-name "/bin/bash")
        ;; (when (string-match-p "some-hostname" (tramp-file-name-host vec))
        ;;  (setq-local shell-file-name "/bin/bash")
        )))
        
(add-hook 'find-file-hook #'my/shell-set-hook)
#+END_SRC

#+RESULTS:
: my/shell-set-hook

** Outline mode

#+BEGIN_SRC emacs-lisp
  (defvar outline-minor-mode-prefix "\M-#")

  (use-package outshine
    :ensure t)

#+END_SRC

#+RESULTS:
: t

** Copy file link

#+BEGIN_SRC emacs-lisp
(defun xah-copy-file-path (&optional *dir-path-only-p)
  "Copy the current buffer's file path or dired path to `kill-ring'.
Result is full path.
If `universal-argument' is called first, copy only the dir path.
URL `http://ergoemacs.org/emacs/emacs_copy_file_path.html'
Version 2017-01-27"
  (interactive "P")
  (let ((-fpath
         (if (equal major-mode 'dired-mode)
             (expand-file-name default-directory)
           (if (buffer-file-name)
               (buffer-file-name)
             (user-error "Current buffer is not associated with a file.")))))
    (kill-new
     (if *dir-path-only-p
         (progn
           (message "Directory path copied: %s" (file-name-directory -fpath))
           (file-name-directory -fpath))
       (progn
         (message "File path copied: %s" -fpath)
         -fpath )))))
#+END_SRC

#+RESULTS:
: xah-copy-file-path

* Coding
** Testing

Install Jorgen Schaefer's ~tdd~ library, which lets me auto-run tests when a buffer is saved.

#+BEGIN_SRC emacs-lisp
  (use-package tdd
    :load-path "site-lisp/tdd/")
#+END_SRC

#+RESULTS:
** Indentation
Autodetect indentation: 

#+BEGIN_SRC emacs-lisp
  (use-package dtrt-indent
    :ensure t
    :config
    (dtrt-indent-mode))
#+END_SRC

#+RESULTS:
: t

** Autocomplete

#+BEGIN_SRC emacs-lisp 

  (use-package company
    :ensure t
    :config
    (global-company-mode)
    (define-key company-active-map (kbd "M-n") nil)
    (define-key company-active-map (kbd "M-p") nil)
    (define-key company-active-map (kbd "C-n") #'company-select-next)
    (define-key company-active-map (kbd "C-p") #'company-select-previous)) 
#+END_SRC

#+RESULTS:
: t

** Git
*** Magit
#+BEGIN_SRC emacs-lisp 

  (use-package magit
    :ensure t
    :config)

#+END_SRC

#+RESULTS:
: t
*** GitHub integration
**** Open GitHub from Helm
#+BEGIN_SRC emacs-lisp 

;;(use-package helm-open-github
;;  :ensure t)

#+END_SRC

*** Open GitHub from file

#+BEGIN_SRC emacs-lisp
    (defun helm-open-github--command-one-line (cmd args)
      (with-temp-buffer
        (when (zerop (apply 'call-process cmd nil t nil args))
          (goto-char (point-min))
          (buffer-substring-no-properties
           (line-beginning-position) (line-end-position)))))

    (defun helm-open-github--branch ()
     (let ((branch (helm-open-github--command-one-line "git" '("symbolic-ref" "HEAD"))))
       (if (not branch)
           (error "Failed: 'git symbolic-ref HEAD'")
         (replace-regexp-in-string "\\`refs/heads/" "" branch))))

    (defun helm-open-github--highlight-marker (start end)
      (cond ((and start end (region-active-p))
             (format "#L%s..L%s" start end))
            (start
             (format "#L%s" start))
            (t "")))

    (require 'subr-x)

    (defun github-file-url ()
      (let* ((branch (helm-open-github--branch))
             (current-file (buffer-file-name))
             (root (vc-git-root current-file))
             (repo-path (file-relative-name current-file root))
             (base-url (string-trim (car (split-string
                                          (shell-command-to-string "hub browse -u")
                                          "tree"))))
             (start-line (line-number-at-pos (if (region-active-p) (region-beginning) (point))))
             (end-line (line-number-at-pos (region-end)))
             (marker (helm-open-github--highlight-marker start-line end-line)))
        (format "%s/blob/%s/%s%s" base-url branch repo-path marker)))

  (defun github-url-save ()
    (interactive)
    (let ((url (github-file-url)) ) 
      (with-temp-buffer
        (insert url)
        (evil-yank (point-min) (point-max)))))

  (defun github-open-file ()
    (interactive)
    (browse-url (github-file-url)))

  (defun org-store-github-link ()
    (interactive)
    (let* ((current-file (buffer-file-name))
           (root (vc-git-root current-file))
           (repo-path (file-relative-name current-file root))
           (github-link (github-file-url)))
      (add-to-list 'org-stored-links (list github-link repo-path))))



#+END_SRC
** Snippets

#+BEGIN_SRC emacs-lisp 

(use-package yasnippet
  :ensure t
  :config

  ;; Make Yasnippet work in Org
  (defun yas/org-very-safe-expand ()
    (let ((yas/fallback-behavior 'return-nil)) (yas/expand)))

  (add-hook 'org-mode-hook
            (lambda ()
              (make-variable-buffer-local 'yas/trigger-key)
              (setq yas/trigger-key [tab])
              (add-to-list 'org-tab-first-hook 'yas/org-very-safe-expand)
              (define-key yas/keymap [tab] 'yas/next-field)))

  (yas-global-mode 1))


#+END_SRC

** Lisp

#+BEGIN_SRC emacs-lisp 

  (defun start-figwheel ()
    "Start figwheel. This function is meant to be called interactively after `cider-jack-in`."
    (interactive)
    (cider-interactive-eval
     "(use 'figwheel-sidecar.repl-api) \n
      (start-figwheel!) \n
      (cljs-repl) \n"))

  (use-package evil-cleverparens
    :ensure t)

  (use-package cider
    :ensure t
    :config
    ;; Start figwheel when I run `M-x cider-jack-in-clojurescript`
    (setq cider-cljs-lein-repl
        "(do (require 'figwheel-sidecar.repl-api)
             (figwheel-sidecar.repl-api/start-figwheel!)
             (figwheel-sidecar.repl-api/cljs-repl))"))

  (use-package cljsbuild-mode
    :ensure t)

  (use-package clojure-mode
    :ensure t)

  (use-package sicp
    :ensure t)

  (use-package geiser
    :ensure t)

  (use-package paredit
    :ensure t
    :config
    (enable-paredit-mode))

  (defvar my/lisp-mode-hooks
    '(emacs-lisp-mode-hook
      lisp-mode-hook
      lisp-interaction-mode-hook
      scheme-mode-hook
      clojure-mode-hook))

  (dolist (mode my/lisp-mode-hooks)
    (add-hook mode #'enable-paredit-mode)
    (add-hook mode #'evil-cleverparens-mode))

  (use-package clj-refactor
    :ensure t
    :config
    (add-hook 'clojure-mode-hook #'my/clojure-mode-hook)
    (cljr-add-keybindings-with-prefix "C-c RET"))

  (defun my/clojure-mode-hook ()
    (clj-refactor-mode 1)
    (yas-minor-mode 1))

#+END_SRC

#+RESULTS:
: my/clojure-mode-hook

** Python
*** Virtualenv

pyvenv is nice because it lets me choose between virtualenvs made through mkvirtualenvwrapper and virtulenvs that are in other places on the filesystem.

We also set up eshell so that it shares its environment with emacs, thus using the virtualenv if it is set.

#+BEGIN_SRC emacs-lisp 

  (use-package pyvenv
    :ensure t
    :config
    (setq eshell-modify-global-environment t)
    (add-hook 'pyvenv-post-activate-hooks (lambda ()
                                            (setq eshell-path-env (getenv "PATH"))))
    (add-hook 'pyvenv-post-deactivate-hooks (lambda ()
                                            (setq eshell-path-env (getenv "PATH"))))
    )

#+END_SRC

#+RESULTS:
: t
*** Refactoring

#+BEGIN_SRC emacs-lisp
  (use-package elpy
    :load-path "site-lisp/elpy"
    :config

    ;; Set pytest as the default test runner
    (elpy-set-test-runner 'elpy-test-pytest-runner)

    ;; Temporary workaround for a warning that comes up: https://github.com/jorgenschaefer/elpy/issues/887
    (setq python-shell-completion-native-enable nil)

    (elpy-enable))
#+END_SRC

#+RESULTS:
: t
*** Formatting

#+BEGIN_SRC emacs-lisp
  (use-package py-yapf
    :ensure t
    :config
    (add-hook 'python-mode-hook 'py-yapf-enable-on-save))
#+END_SRC

#+RESULTS:
: t

** JSON
#+BEGIN_SRC emacs-lisp 

  (use-package json-mode
    :ensure t)

#+END_SRC
** Markdown
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure t)
#+END_SRC

#+RESULTS:

** Swift
#+BEGIN_SRC emacs-lisp 

(use-package swift-mode
  :ensure t)

#+END_SRC
** CoffeeScript
#+BEGIN_SRC emacs-lisp 

(use-package coffee-mode
  :ensure t)

#+END_SRC
** JavaScript
*** REPL
js-comint lets me run a repl inside emacs where I can evaluate JavaScript.

#+BEGIN_SRC emacs-lisp 

  (use-package js-comint
    :ensure t)

#+END_SRC
*** Ember

#+BEGIN_SRC emacs-lisp
  (use-package ember-mode
    :ensure t)
#+END_SRC

#+RESULTS:
*** Indentation

I typically use 2 spaces to indent.

#+BEGIN_SRC emacs-lisp
  (setq js-indent-level 2)
#+END_SRC
** Haskell
#+BEGIN_SRC emacs-lisp 

(use-package haskell-mode
  :ensure t)

#+END_SRC
** Docker
*** Dockerfile mode
#+BEGIN_SRC emacs-lisp :tangle yes

  (use-package dockerfile-mode
    :ensure t)

#+END_SRC

#+RESULTS:
*** Docker mode
[[https://github.com/Silex/docker.el][Docker mode]] lets me run various docker commands.

#+BEGIN_SRC emacs-lisp 

  (use-package docker
    :ensure t
    :diminish docker-mode
    :config
    (docker-global-mode))

#+END_SRC

#+RESULTS:
: t

*** Environment variables
~docker-machine env default~ produces these environment variables, which must be set to use Docker.

#+BEGIN_SRC emacs-lisp
  (setenv "DOCKER_TLS_VERIFY" "1")
  (setenv "DOCKER_HOST" "tcp://192.168.99.100:2376")
  (setenv "DOCKER_CERT_PATH" "/Users/mark/.docker/machine/machines/default")
  (setenv "DOCKER_MACHINE_NAME" "default")
#+END_SRC

#+RESULTS:
: default
** Shell
Fish is my default shell in the terminal, but it doesn't work well in emacs, since many emacs integrations assume a sh-like shell. Let's use zsh instead.

#+BEGIN_SRC emacs-lisp
  (setq shell-file-name "/bin/zsh")
#+END_SRC
** YAML

#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :ensure t)
#+END_SRC
** Lua

#+BEGIN_SRC emacs-lisp
  (use-package lua-mode
    :ensure t)
#+END_SRC
** HTML

Let's use web-mode, which supports font locking for templating.

#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :mode (("\\.html\\'" . web-mode)
           ("\\.html\\.erb\\'" . web-mode)
           ("\\.mustache\\'" . web-mode)
           ("\\.jinja\\'" . web-mode)
           ("\\.hbs\\'" . web-mode))
    :ensure t
    :config
    (setq web-mode-markup-indent-offset 2)
    (setq web-mode-css-indent-offset 2)
    (setq web-mode-code-indent-offset 2))
#+END_SRC

#+RESULTS:
** PHP

#+BEGIN_SRC emacs-lisp
  (use-package php-mode
    :ensure t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package phpunit
    :load-path "~/.emacs.d/site-lisp/phpunit"
    :config
      (general-define-key
       :states '(normal)
       :keymaps 'php-mode-map
       :prefix "C-c"
       "C-t" 'phpunit-current-test))
#+END_SRC
** LaTeX

#+BEGIN_SRC emacs-lisp
  (use-package auctex
    :ensure t
    :mode ("\\.tex\\'" . latex-mode)
    :commands (latex-mode LaTeX-mode plain-tex-mode))
#+END_SRC

#+RESULTS:
** API exploration

#+BEGIN_SRC emacs-lisp
  (use-package restclient
    :ensure t)
#+END_SRC
** eshell

#+BEGIN_SRC emacs-lisp
  (add-hook 'eshell-mode-hook
            (lambda()
              (define-key eshell-mode-map (kbd "M-r") 'helm-eshell-history)
              (define-key eshell-mode-map [remap eshell-pcomplete] 'helm-esh-pcomplete)
              (define-key eshell-mode-map (kbd "M-p") 'helm-eshell-history)))
#+END_SRC

** go

#+BEGIN_SRC emacs-lisp
  (use-package go-mode
    :ensure t
    :config
    (add-hook 'before-save-hook 'gofmt-before-save))

  (use-package company-go
    :ensure t
    :config
    (add-hook 'go-mode-hook (lambda ()
                              (set (make-local-variable 'company-backends)
                                   '(company-go)))))
#+END_SRC

#+RESULTS:
: t
** Ruby

#+BEGIN_SRC emacs-lisp
  (use-package inf-ruby
    :ensure t
    :config
    (add-hook 'ruby-mode-hook 'inf-ruby-minor-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package robe
    :ensure t
    :config
    (add-hook 'ruby-mode-hook 'robe-mode))
#+END_SRC

#+RESULTS:
: t

#+BEGIN_SRC emacs-lisp
  (use-package seeing-is-believing
    :ensure t
    :config
    (add-hook 'ruby-mode-hook 'seeing-is-believing))
#+END_SRC


#+BEGIN_SRC emacs-lisp
  (use-package rbenv
    :ensure t
    :config
    (global-rbenv-mode)
    (rbenv-use-global))
#+END_SRC

#+BEGIN_SRC emacs-lisp
    (use-package rspec-mode
      :ensure t)
#+END_SRC

#+RESULTS:
: t

* Org Mode
I use Org Mode to take notes for work and personal.

** My files
#+BEGIN_SRC emacs-lisp 

  (defun my/configure-org-directories ()
    (setq org-directory "~/org")
    (setq org-default-notes-file "~/org/inbox.org")
    (setq org-refile-use-outline-path 'file)
    (setq org-outline-path-complete-in-steps nil)
    (setq org-agenda-files (quote ("~/org")))
    (setq org-refile-targets '((org-agenda-files . (:maxlevel . 2)))))

#+END_SRC

#+RESULTS:
: my/configure-org-directories

** General configuration
*** Open links in new frames

Here's a function that lets me open org links in a new frame. The default behavior is opening a link in a new buffer in the same frame, which doesn't always fit with my workflow -- sometimes I have org open in a separate frame, with the main editing frame on a different monitor.

#+BEGIN_SRC emacs-lisp
  (require 'cl)

  (defun org-open-other-frame ()
    "Jump to bookmark in another frame. See `bookmark-jump' for more."
    (interactive)
    (let ((org-link-frame-setup (acons 'file 'find-file-other-frame org-link-frame-setup)))
      (org-open-at-point)))
#+END_SRC

#+RESULTS:
: org-open-other-frame
*** Log drawer
I can type timestamped notes for a given tree with ~C-c C-z~. By default, they are appending to the top of the note. Let's stash then in the ~LOGBOOK~ drawer instead.

#+BEGIN_SRC emacs-lisp

  (setq org-log-into-drawer t)

#+END_SRC

#+RESULTS:
: t

*** Variable pitch mode

#+BEGIN_SRC emacs-lisp 

  (defun my/org-variable-pitch ()
    "Use variable pitch for prose text in org."
    (interactive)
    (variable-pitch-mode t)
    (set-face-attribute 'org-table nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-block nil :inherit 'fixed-pitch))

#+END_SRC

#+RESULTS:
: my/org-variable-pitch

*** Org babel languages and configuration

#+BEGIN_SRC emacs-lisp
  (defun my/org-babel-config () 
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (python . t)
       (plantuml . t)
       (shell . t))))
#+END_SRC

#+RESULTS:
: my/org-babel-config

*** Putting it together
#+BEGIN_SRC emacs-lisp 

  (defun my/configure-org ()
    (setq org-image-actual-width 300)
    (setq org-src-fontify-natively t)
    (setq org-log-done 'time)

    (setq org-startup-truncated 'nil)
    (setq org-catch-invisible-edits 'smart)

    ;; Do not dim blocked tasks
    (setq org-agenda-dim-blocked-tasks nil)

    ;; Start up in org-indent-mode
    (setq org-startup-indented t)
    ;; Diminish org-indent-mode in the mode-line
    (eval-after-load 'org-indent '(diminish 'org-indent-mode))
    (setq org-hide-emphasis-markers t))


  (defun my/org-mode ()
    (my/org-mode-keyboard-shortcuts)
   ;; (my/org-variable-pitch)
    )

  (defun my/org-agenda-mode ()
    (my/org-agenda-keyboard-shortcuts))

  (setq-default fill-column 85)

#+END_SRC

#+RESULTS:
: 85

** Keyboard shortcuts
*** Editing

#+BEGIN_SRC emacs-lisp 

  (defun my/org-mode-keyboard-shortcuts ()
    (general-define-key
     :states '(normal)
     :keymaps 'org-mode-map
     :prefix "SPC"
      "*" 'org-ctrl-c-star
      "a" 'org-agenda
      "ih" 'org-insert-heading-after-current-and-enter-insert
      "is" 'org-insert-subheading-after-current-and-enter-insert
      "it" 'org-insert-todo-after-current-and-enter-insert
      "n" 'org-narrow-to-subtree
      "N" 'widen
      "ml" 'org-do-demote
      "mL" 'org-demote-subtree
      "mh" 'org-do-promote
      "mH" 'org-promote-subtree
      "mk" 'org-metaup
      "mj" 'org-metadown
      "s" 'org-schedule
      "t" 'org-todo))

#+END_SRC

#+RESULTS:
: my/org-mode-keyboard-shortcuts

*** Agenda

#+BEGIN_SRC emacs-lisp 

(defun my/org-agenda-keyboard-shortcuts ()
  ;;(define-key org-agenda-mode-map "j" 'evil-next-line)
  ;;(define-key org-agenda-mode-map "k" 'evil-previous-line))
)

#+END_SRC

#+RESULTS:
: my/org-agenda-keyboard-shortcuts

** Editing
*** Useful functions

#+BEGIN_SRC emacs-lisp 

(defun org-insert-subheading-after-current ()
  (interactive)
  (org-insert-heading-after-current)
  (org-demote))

(defun org-insert-subheading-after-current-and-enter-insert ()
  (interactive)
  (org-insert-subheading-after-current)
  (evil-append 0))

(defun org-insert-heading-after-current-and-enter-insert ()
  (interactive)
  (org-insert-heading-after-current)
  (evil-append 0))

(defun org-insert-todo-after-current-and-enter-insert ()
  (interactive)
  (org-insert-todo-heading-respect-content)
  (evil-append 0))

#+END_SRC

#+RESULTS:
: org-insert-todo-after-current-and-enter-insert

** Tasks

#+BEGIN_SRC emacs-lisp 

  (defun my/configure-org-todos ()
    (setq org-todo-keywords
          (quote ((sequence "TODO(t)" "STARTED(s)" "MAYBE(m)" "|" "DONE(d)")
                  (sequence "WAITING(w@/!)" "HOLD(h@/!)" "DELEGATED(e)" "|" "CANCELLED(c@/!)" "PHONE" "MEETING"))))

    (setq org-todo-keyword-faces
          (quote (("TODO" :foreground "red" :weight bold)
                  ("NEXT" :foreground "blue" :weight bold)
                  ("DONE" :foreground "forest green" :weight bold)
                  ("WAITING" :foreground "orange" :weight bold)
                  ("HOLD" :foreground "magenta" :weight bold)
                  ("CANCELLED" :foreground "forest green" :weight bold)
                  ("MEETING" :foreground "forest green" :weight bold)
                  ("PHONE" :foreground "forest green" :weight bold))))

    (setq org-use-fast-todo-selection t))

#+END_SRC

#+RESULTS:
: my/configure-org-todos

** Agenda

#+BEGIN_SRC emacs-lisp 

#+END_SRC
** Exporters
#+BEGIN_SRC emacs-lisp 

  (defun my/configure-org-exporters ()
    (use-package ox-gfm
      :ensure t)

    (use-package org-habit)

    (use-package ox-odt
      :config
      (setq org-odt-preferred-output-format "rtf"))

    (use-package ox-jira
      :ensure t)

    (use-package ox-rst
      :ensure t))
#+END_SRC

#+RESULTS:
: my/configure-org-exporters

** JIRA
I often link to JIRA issues in my tasks. This function lets me add link JIRA issues by issue title rather than needing to paste in the full link.

#+BEGIN_SRC emacs-lisp

  (defvar default-jira-repository)
  (setq default-jira-repository "getclef.atlassian.net")

  (defun org-jira-insert-link (issue-name description)
    "Add links to JIRA issues by title."
    (interactive "sIssue: \nsDescription: ")
    (let ((desc (if (string= "" description) issue-name description))) 
      (org-insert-link nil (concat "https://" default-jira-repository "/browse/" issue-name) desc)))

#+END_SRC

#+RESULTS:
: org-jira-insert-link
** Capture

#+BEGIN_SRC emacs-lisp
  (setq org-tag-alist '((:startgroup . nil)
                        ("OFFICE" . ?o)
                        ("HOME" . ?h)
                        ("ERRANDS" . ?e)
                        (:endgroup . nil)
                        ("COMPUTER" . ?c)
                        ("WATCH" . ?w)
                        ("READ" . ?r)
                        ("PHONE" . ?p)))

  (setq org-capture-templates
        '(("n" "Note" entry (file+headline "~/org/inbox.org" "Notes")
           "* %?\n:LOGBOOK:\n- Added %U\n:END:\n%a\n")
          ("p" "Project idea" entry (file+headline "~/org/inbox.org" "Project Ideas")
           "* %?\n:LOGBOOK:\n- Added %U\n:END:\n%a\n")
          ("c" "Calendar" entry (file+headline "~/org/calendar.org" "Calendar")
           "* %?\n")
          ("t" "Todo" entry (file+headline "~/org/inbox.org" "Tasks")
           "* TODO %?\nSCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"+0d\"))\n:LOGBOOK:\n- Added %U\n:END:\n%a\n")))
#+END_SRC

#+RESULTS:
| n | Note | entry | (file+headline ~/org/inbox.org Notes) | * %? |

** Org protocol
#+BEGIN_SRC emacs-lisp
  (defun my/configure-org-protocol ()
    (use-package org-protocol)
    (server-start))
#+END_SRC

#+RESULTS:
: my/configure-org-protocol
** Installation
#+BEGIN_SRC emacs-lisp 

  (use-package org
    :ensure org-plus-contrib
    :config

    (my/configure-org-directories)
    (my/configure-org-exporters)
    (my/configure-org-todos)
    (my/configure-org)
    (my/configure-org-protocol)
    (my/org-babel-config)
    (setq org-inline-image-overlays t)

    (add-hook 'org-mode-hook #'my/org-mode)
    (add-hook 'org-agenda-mode-hook #'my/org-agenda-mode))

#+END_SRC

#+RESULTS:
: t

** Archive using same hierarchy

Source: https://gist.github.com/Fuco1/e86fb5e0a5bb71ceafccedb5ca22fcfb.

#+BEGIN_SRC emacs-lisp
(defadvice org-archive-subtree (around fix-hierarchy activate)
  (let* ((fix-archive-p (and (not current-prefix-arg)
                             (not (use-region-p))))
         (afile (org-extract-archive-file (org-get-local-archive-location)))
         (buffer (or (find-buffer-visiting afile) (find-file-noselect afile))))
    ad-do-it
    (when fix-archive-p
      (with-current-buffer buffer
        (goto-char (point-max))
        (while (org-up-heading-safe))
        (let* ((olpath (org-entry-get (point) "ARCHIVE_OLPATH"))
               (path (and olpath (split-string olpath "/")))
               (level 1)
               tree-text)
          (when olpath
            (org-mark-subtree)
            (setq tree-text (buffer-substring (region-beginning) (region-end)))
            (let (this-command) (org-cut-subtree))
            (goto-char (point-min))
            (save-restriction
              (widen)
              (-each path
                (lambda (heading)
                  (if (re-search-forward
                       (rx-to-string
                        `(: bol (repeat ,level "*") (1+ " ") ,heading)) nil t)
                      (org-narrow-to-subtree)
                    (goto-char (point-max))
                    (unless (looking-at "^")
                      (insert "\n"))
                    (insert (make-string level ?*)
                            " "
                            heading
                            "\n"))
                  (cl-incf level)))
              (widen)
              (org-end-of-subtree t t)
              (org-paste-subtree level tree-text))))))))
#+END_SRC

** Interleave mode

Take notes on PDFs in org-mode side-by-side with the PDF.

#+BEGIN_SRC emacs-lisp
  (use-package interleave
    :ensure t)
#+END_SRC

#+RESULTS:

** PlantUML

#+BEGIN_SRC emacs-lisp
  (use-package plantuml-mode
    :ensure t
    :config
    (setq plantuml-jar-path (expand-file-name "~/src/plantuml.jar"))
    (setq org-plantuml-jar-path plantuml-jar-path)
    (add-to-list
     'org-src-lang-modes '("plantuml" . plantuml)))

  (add-hook 'org-babel-after-execute-hook
            (lambda ()
              (when org-inline-image-overlays
                (org-redisplay-inline-images))))
#+END_SRC

#+RESULTS:
| lambda | nil | (when org-inline-image-overlays (org-redisplay-inline-images)) |

* IRC
** Circe
#+BEGIN_SRC emacs-lisp 
  (setq my-credentials-file "~/.private.el")

  (defun my/nickserv-password (_)
    (with-temp-buffer
      (insert-file-contents-literally my-credentials-file)
      (plist-get (read (buffer-string)) :nickserv-password)))

  (use-package circe
    :ensure t
    :config

    (setq circe-network-options
          `(("Freenode"
             :nick "landakram"
             :channels (:after-auth
                        "#emacs"
                        "#clojure"
                        "#clojure-beginners"
                        "#iphonedev"
                        "#swift-lang"
                        "#racket")
             :nickserv-password my/nickserv-password
             :reduce-lurker-spam t)))
    (enable-circe-color-nicks))
#+END_SRC

#+RESULTS:
: t

* RSS Feeds
** elfeed
#+BEGIN_SRC emacs-lisp 

  (use-package elfeed
    :ensure t
    :config

    (setq elfeed-feeds
          '("http://lambda-the-ultimate.org/rss.xml"
            "http://planet.emacsen.org/atom.xml"
            "http://www.overcomingbias.com/feed"
            "http://slatestarcodex.com/feed/"
            "http://worrydream.com/feed.xml"
            "https://xkcd.com/rss.xml"
            "http://existentialcomics.com/rss.xml"
            "http://joshldavis.com/atom.xml"
            "https://rationalconspiracy.com/feed/"
            "https://soylentnews.org/index.rss"
            "http://meaningness.com/rss.xml"
            "http://feeds.ribbonfarm.com/Ribbonfarm"
            "http://www.cs.uni.edu/~wallingf/blog/index.xml"
            ;;"https://feeds.feedburner.com/Metafilter"
            "http://feeds.feedburner.com/thoughtsfromtheredplanet?format=xml"
            "http://www.gwern.net/atom.xml"
            "http://airspeedvelocity.net/feed/")))

#+END_SRC

#+RESULTS:
: t

** URL queue timeout
This is long so that fetching feeds does not timeout.

#+BEGIN_SRC emacs-lisp 

(setq url-queue-timeout 30)

#+END_SRC
* Email
** mu4e

#+BEGIN_SRC emacs-lisp

  (add-to-list 'load-path "/usr/local/Cellar/mu/0.9.9.5/share/emacs/site-lisp/mu/mu4e")
  
  (setq mm-sign-option 'guided)

  (use-package mu4e
    :config
    ;; default
    (setq mu4e-maildir (expand-file-name "~/Maildir"))

    ;; (setq mu4e-drafts-folder "/[Gmail].Drafts")
    ;; (setq mu4e-sent-folder   "/[Gmail].Sent Mail")
    ;; (setq mu4e-trash-folder  "/[Gmail].Trash")

    ;; don't save message to Sent Messages, GMail/IMAP will take care of this
    (setq mu4e-sent-messages-behavior 'delete)

    ;; setup some handy shortcuts
    ;; (setq mu4e-maildir-shortcuts
    ;;       '(("/INBOX"             . ?i)
    ;;         ("/[Gmail].Sent Mail" . ?s)
    ;;         ("/[Gmail].Trash"     . ?t)))

    ;; allow for updating mail using 'U' in the main view:
    (setq mu4e-get-mail-command "mbsync -a")

    (setq mu4e-change-filenames-when-moving t)

    ;; Show images
    (setq mu4e-view-show-images t)

    ;; Don't use mu4e's default HTML renderer. It's hard to read for most messages.
    (setq mu4e-html2text-command "html2text -utf8 -nobs -width 72")
  
    ;; 
    (add-to-list 'mu4e-view-actions
                 '("open URL" . mu4e-view-go-to-url) t)

    (setq
     user-mail-address "me@markhudnall.com"
     user-full-name  "Mark Hudnall"
     ;; message-signature
     ;;  (concat
     ;;    "Foo X. Bar\n"
     ;;    "http://www.example.com\n")
     )

    ;; sending mail -- replace USERNAME with your gmail username
    ;; also, make sure the gnutls command line utils are installed
    ;; package 'gnutls-bin' in Debian/Ubuntu, 'gnutls' in Archlinux.

    (use-package smtpmail
      :ensure t
      :config
      (setq message-send-mail-function 'smtpmail-send-it
            starttls-use-gnutls t
            smtpmail-starttls-credentials
            '(("smtp.gmail.com" 587 nil nil))
            smtpmail-auth-credentials
            (expand-file-name "~/.authinfo.gpg")
            smtpmail-default-smtp-server "smtp.gmail.com"
            smtpmail-smtp-server "smtp.gmail.com"
            smtpmail-smtp-service 587
            smtpmail-debug-info t))

    (use-package evil-mu4e
      :ensure t)

    (use-package org-mu4e
      :config)

    (setq mu4e-contexts
          `( ,(make-mu4e-context
               :name "Personal"
               :enter-func (lambda () (mu4e-message "Switch to the Personal context"))
               ;; leave-func not defined
               :match-func (lambda (msg)
                             (when msg 
                               (mu4e-message-contact-field-matches msg 
                                                                   :to "me@markhudnall.com")))
               :vars '((user-mail-address        . "me@markhudnall.com"  )
                       (user-full-name           . "Mark Hudnall" )
                       (mu4e-drafts-folder       . "/Personal/[Gmail]/.Drafts")
                       (mu4e-sent-folder         . "/Personal/[Gmail]/.Sent Mail")
                       (mu4e-trash-folder        . "/Personal/[Gmail]/.Trash")
                       (mu4e-refile-folder       . "/Personal/[Gmail]/.All Mail")
                       (mu4e-maildir-shortcuts   . (("/Personal/INBOX" . ?i)
                                                    ("Personal/[Gmail]/.Sent Mail"  . ?s)
                                                    ("Personal/[Gmail]/.Trash" . ?t)))
                       (mu4e-compose-signature   . nil)))
             ,(make-mu4e-context
               :name "Work"
               :enter-func (lambda () (mu4e-message "Switch to the Work context"))
               ;; leave-fun not defined
               :match-func (lambda (msg)
                             (when msg 
                               (mu4e-message-contact-field-matches msg 
                                                                   :to "mark@getclef.com")))
               :vars '((user-mail-address        . "mark@getclef.com" )
                       (user-full-name           . "Mark Hudnall" )
                       (mu4e-drafts-folder       . "")
                       (mu4e-drafts-folder       . "/Work/[Gmail]/.Drafts")
                       (mu4e-sent-folder         . "/Work/[Gmail]/.Sent Mail")
                       (mu4e-trash-folder        . "/Work/[Gmail]/.Trash")
                       (mu4e-refile-folder       . "/Work/[Gmail]/.All Mail")
                       (mu4e-maildir-shortcuts   . (("/Work/INBOX" . ?i)
                                                    ("Work/[Gmail]/.Sent Mail"  . ?s)
                                                    ("Work/[Gmail]/.Trash" . ?t)))
                       (mu4e-compose-signature .
                                               (concat
                                                "---\n"
                                                "Mark Hudnall\n"
                                                "CTO and Co-founder of Clef\n"
                                                "mark@getclef.com"))))))

    ;; set `mu4e-context-policy` and `mu4e-compose-policy` to tweak when mu4e should
    ;; guess or ask the correct context, e.g.

    ;; start with the first (default) context; 
    ;; default is to ask-if-none (ask when there's no context yet, and none match)
    ;; (setq mu4e-context-policy 'pick-first)

    ;; compose with the current context is no context matches;
    ;; default is to ask 
    ;; '(setq mu4e-compose-context-policy nil)

    ;; (setq mu4e-update-interval 300)
)
#+END_SRC

#+RESULTS:
: t
* Budgeting

#+BEGIN_SRC emacs-lisp
  (use-package ledger-mode
    :ensure t)
#+END_SRC

#+RESULTS:
* External services (prodigy)

#+BEGIN_SRC emacs-lisp
  (use-package prodigy
    :ensure t)
#+END_SRC

Services are defined in [[*Load host specific configuration][host specific configuration files]].
* Emacs lisp utility functions and libraries
** shell-command-ignore-stderr

Like shell-command, but only returns stdout.

#+BEGIN_SRC emacs-lisp
    (defun shell-command-ignore-stderr (some-command)
      (with-output-to-string
        (with-current-buffer standard-output
          (process-file shell-file-name nil '(t nil)  nil shell-command-switch some-command))))
#+END_SRC

** request.el

#+BEGIN_SRC emacs-lisp
  (use-package request
    :ensure t)

  (use-package request-deferred
    :ensure t)
#+END_SRC

#+RESULTS:
** Concurrency
*** deferred.el

#+BEGIN_SRC emacs-lisp
  (use-package deferred
    :ensure t)
#+END_SRC

#+RESULTS:

*** concurrent.el

Higher level wrapper on-top of deferred.el. Interesting to play around with.

#+BEGIN_SRC emacs-lisp
  (use-package concurrent
    :ensure t)
#+END_SRC

#+RESULTS:

** String manipulation (s.el)

#+BEGIN_SRC emacs-lisp
  (use-package s
    :ensure t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defun snake-case-thing-at-point ()
    (interactive)
    (let* ((bounds (bounds-of-thing-at-point 'word))
           (start (car bounds))
           (end (cdr bounds))
           (thing (buffer-substring-no-properties start end))
           (new-thing (s-snake-case
                       (s-lower-camel-case thing))))
      (delete-region start end)
      (insert new-thing)))

  (defun camel-case-thing-at-point ()
    (interactive)
    (let* ((bounds (bounds-of-thing-at-point 'word))
           (start (car bounds))
           (end (cdr bounds))
           (thing (buffer-substring-no-properties start end))
           (new-thing (s-lower-camel-case thing)))
      (delete-region start end)
      (insert new-thing)))
#+END_SRC

#+RESULTS:
: camel-case-thing-at-point
** List manipulation (dash.el)

#+BEGIN_SRC emacs-lisp
  (use-package dash
    :ensure t)
#+END_SRC

#+RESULTS:

** Hash table manipulation (ht.el)

#+BEGIN_SRC emacs-lisp
  (use-package ht
    :ensure t)
#+END_SRC

#+RESULTS:
