# -*- coding: utf-8 -*-
#+TITLE: Mark's Emacs Config
#+OPTIONS: toc:2 num:nil ^:nil
#+PROPERTY: header-args :tangle "./init.el"

* Introduction

Welcome to my emacs config!

* Prelude

First, let's take care of some startup stuff.

** Remove the startup message
:PROPERTIES:
:ID:       0C5C811B-6596-4886-BC5C-FAFD23AD0E80
:END:

I don't like the startup message, so let's get rid of it.

#+BEGIN_SRC emacs-lisp

(setq inhibit-startup-message t)

#+END_SRC

** Set the Custom file
:PROPERTIES:
:ID:       C10F46AF-0F67-4878-831C-B0E5474A8206
:END:

Let's set ~custom-file~, which emacs writes to automatically.

#+BEGIN_SRC emacs-lisp

(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file)

#+END_SRC

#+RESULTS:
: t

** Start up maximized
:PROPERTIES:
:ID:       3BDC37A6-1544-4921-A776-CF057A0C1A7E
:END:

#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
  (setq frame-resize-pixelwise t)
#+END_SRC

#+RESULTS:
: t

** Use org for the scratch buffer
:PROPERTIES:
:ID:       7B52A965-0E32-44B9-8E21-E8F999EDAFE9
:END:

#+BEGIN_SRC emacs-lisp
  (setq initial-major-mode 'org-mode)
  (setq initial-scratch-message "# This buffer is for notes you don't want to save.")
#+END_SRC

#+RESULTS:
: # This buffer is for notes you don't want to save.

* Packages

** Set up ~package.el~
:PROPERTIES:
:ID:       A9556360-8DCF-42E2-8B25-7A40614EF195
:END:

#+BEGIN_SRC emacs-lisp

(require 'package)
(setq package-archives
      '(("gnu" . "http://elpa.gnu.org/packages/")
        ("org" . "http://orgmode.org/elpa/")
        ("melpa" . "http://melpa.org/packages/")))

(package-initialize)

#+END_SRC

** Set up ~straight.el~
:PROPERTIES:
:ID:       13CBB27F-C0DF-4AFE-A3B1-698BA1371432
:END:

#+begin_src emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+end_src

#+RESULTS:
: t

** Install ~use-package~
:PROPERTIES:
:ID:       8A946C5D-012F-4B8A-99AE-D14569E4C088
:END:

~use-package~ is used for the rest of the config. It lets me define installable packages and configure them in the same block.

#+BEGIN_SRC emacs-lisp

  (straight-use-package 'use-package)

  (eval-when-compile
    (require 'use-package))

#+END_SRC

#+RESULTS:
: diminish

** Install ~diminish~
:PROPERTIES:
:ID:       6E6D6418-A509-4C0C-9791-E27BDD2686E3
:END:

We also install ~diminish~, because ~use-package~ depends on it. ~diminish~ lets you hide minor modes from the mode-line.

#+BEGIN_SRC emacs-lisp

(unless (package-installed-p 'diminish)
  (package-install 'diminish))

(require 'diminish)

#+END_SRC

Now, we diminish some modes (I can't figure out where they are loaded):

#+BEGIN_SRC emacs-lisp
  (global-auto-revert-mode)
  (diminish 'auto-revert-mode)
#+END_SRC

#+RESULTS:
|   |
** Try packages without installing
:PROPERTIES:
:ID:       7007149A-27DD-4505-B531-394D2D07477E
:END:

#+BEGIN_SRC emacs-lisp
  (use-package try
    :defer t
    :ensure t)
#+END_SRC

#+RESULTS:
** Better interface for packages
:PROPERTIES:
:ID:       EE0F5A1B-4DDF-4665-955F-73858FE36262
:END:

Brought to you by Paradox:

#+BEGIN_SRC emacs-lisp
  (use-package paradox
    :defer t
    :ensure t)
#+END_SRC

#+RESULTS:
* General Configuration

Let's configure the editor to our liking.

** Theme
*** Change the Mode Line
:PROPERTIES:
:ID:       9146260D-B31A-41E0-9DD2-50CE614E3AAA
:END:

This mode line is pretty.

#+BEGIN_SRC emacs-lisp 
  (use-package mood-line
    :straight t
    :config
    (set-face-attribute 'mood-line-buffer-name
                        nil
                        :weight 'bold)
    (mood-line-mode))
#+END_SRC

#+RESULTS:
: t

#+RESULTS:
*** Change the theme
:PROPERTIES:
:ID:       E9447020-C3D8-4C22-93EB-E426FFC1C59E
:END:

#+BEGIN_SRC emacs-lisp 
    (use-package base16-theme
      :ensure t
      :config
      (setq base16-theme-256-color-source 'base16-shell)
      (setq base16-distinct-fringe-background nil)
      (load-theme 'base16-tomorrow-night t))

    ;; (use-package monokai-theme
    ;;   :ensure t
    ;;   :config
    ;;   (setq monokai-use-variable-pitch nil)
    ;;   (load-theme 'monokai t))


    ;; (use-package color-theme-sanityinc-tomorrow
    ;;   :ensure t
    ;;   :config
    ;;   (color-theme-sanityinc-tomorrow-eighties))

#+END_SRC

#+RESULTS:
: t

*** Per-buffer themes
:PROPERTIES:
:ID:       5363117C-0849-4C10-81F2-2F61E3EC24C9
:END:

I'd like to use a light theme for email and org mode.

It's commented out right now because it looks terrible.

#+BEGIN_SRC emacs-lisp
  ;; (use-package color-theme
  ;;   :ensure t)


  ;; (use-package load-theme-buffer-local
  ;;   :ensure t
  ;;   :config
  ;;   (add-hook 'org-mode-hook (lambda ()
  ;;                              (load-theme-buffer-local
  ;;                               'leuven
  ;;                               (current-buffer)))))

  ;; (use-package color-theme-buffer-local
  ;;   :ensure t)
#+END_SRC

#+RESULTS:

** Symlinks
:PROPERTIES:
:ID:       DD565DE5-BAEA-41AB-8847-C4AA6B8C9107
:END:

Follow symlinks without prompting me.

#+BEGIN_SRC emacs-lisp

  (setq vc-follow-symlinks t)

#+END_SRC

** Ignore files
:PROPERTIES:
:ID:       E411EE93-3B39-40BE-9072-6BEDB16CDC6F
:END:

Life's too short to see this many files in dired / projectile / etc.

#+BEGIN_SRC emacs-lisp

  (use-package ignoramus
    :ensure t
    :config
    (ignoramus-setup))

#+END_SRC

#+RESULTS:
: t

** Change "yes or no" to "y or n"
:PROPERTIES:
:ID:       6C7AE19E-2BE7-4D21-83F3-39DA68D44ED6
:END:

#+BEGIN_SRC emacs-lisp 

(defalias 'yes-or-no-p 'y-or-n-p)

#+END_SRC

** Enable flycheck
:PROPERTIES:
:ID:       69A4BB21-C56A-4D69-A0FF-981F97CA5044
:END:

Flycheck is an on-the-fly syntax checker.

#+BEGIN_SRC emacs-lisp 

  (use-package flycheck
    :ensure t
    :hook (after-init . global-flycheck-mode)
    :diminish flycheck-mode
    :config
    (flycheck-add-mode 'javascript-eslint 'js2-mode)
    (flycheck-add-mode 'javascript-eslint 'js-mode)

    ;; Disable syntax checking on new-line for emacs lisp, since for some reason 
    ;; it is really slow
    (add-hook 'emacs-lisp-mode-hook
              (lambda ()
                (setq-local flycheck-check-syntax-automatically '(idle-check mode-enabled save))))


    (setq-default flycheck-disabled-checkers
                  (append flycheck-disabled-checkers
                          '(javascript-jshint
                            ruby-rubocop
                            ruby-reek
                            emacs-lisp-checkdoc))))
#+END_SRC

#+RESULTS:
: t

** Disable bell ring
:PROPERTIES:
:ID:       C9FE1798-AC71-4A60-B2B1-D2B3ADD0863A
:END:

#+BEGIN_SRC emacs-lisp 

(setq ring-bell-function 'ignore)

#+END_SRC

** Better defaults
:PROPERTIES:
:ID:       DAB1944E-F18E-42DA-AD73-D323E75EB94F
:END:

#+BEGIN_SRC emacs-lisp 

  (use-package better-defaults
    :ensure t)

#+END_SRC

#+RESULTS:
|   |

** Better search
:PROPERTIES:
:ID:       51FB1557-E0E3-47BD-942C-7E1FC67A1F03
:END:

I use ~ag~ religiously on the command line. Let's use it in emacs too.

#+BEGIN_SRC emacs-lisp 

  (use-package ag
    :ensure t
    :defer t)

#+END_SRC

** Visual fill column
:PROPERTIES:
:ID:       F3525474-AFE0-481F-82C3-A4EF3B371480
:END:

Visually wraps lines according to the value of ~fill-column~. Unlike ~fill-column~, ~visual-fill-column~ does not *actually* wrap text in the file. It just displays it as wrapped.

#+BEGIN_SRC emacs-lisp 

  ;; (use-package visual-fill-column
  ;;   :ensure t
  ;;   :diminish visual-line-mode
  ;;   :config
  ;;   (add-hook 'text-mode-hook 'visual-fill-column-mode)
  ;;   (global-visual-line-mode))

#+END_SRC

#+RESULTS:
: t
** which-key
:PROPERTIES:
:ID:       5395D768-6563-4C69-81AE-F5457687E281
:END:

Remembering keyboard shortcuts is hard. which-key pops up a buffer reminding me of shortcuts when I start typing them.

#+BEGIN_SRC emacs-lisp 
  (use-package which-key
    :ensure t
    :diminish which-key-mode
    :config
    (which-key-mode)
    (setq which-key-idle-delay 0.3))

#+END_SRC

#+RESULTS:
: t

** Disable file locking
:PROPERTIES:
:ID:       3574BB44-7D32-467B-80AD-0389D0B2EF41
:END:

The bizarre symlink-based file locking isn't really necessary for me since I never have more than one instance of emacs open. It causes problems with tools that watch directories for files, so let's disable it.

#+BEGIN_SRC emacs-lisp
(setq create-lockfiles nil)
#+END_SRC

** Fix the PATH variable
:PROPERTIES:
:ID:       54A7DCD8-7433-4699-B73E-9E64D8695529
:END:

This sets up emacs to inherit commands from ~$PATH~. Without it, some commands that are available in the shell would not be available in emacs.

#+BEGIN_SRC emacs-lisp 
  (use-package exec-path-from-shell
    :ensure t
    :config
    (setq exec-path-from-shell-arguments '("-l"))
    (setq exec-path-from-shell-variables '("PATH"
                                           "MANPATH"
                                           "NIX_PATH"
                                           "SSH_AGENT_PID"
                                           "SSH_AUTH_SOCK"))
    (exec-path-from-shell-initialize))
#+END_SRC

#+RESULTS:
: t

** Make gpg-agent work
:PROPERTIES:
:ID:       A0633618-F6A0-48E6-85B5-8AE3897DA961
:END:

This function will load ~/.gpg-agent-info and source its contents into ~GPG_AGENT_INFO~.

I need this to pull mail for m4ue.

#+BEGIN_SRC emacs-lisp
  (defun my/gpg-agent ()
    "Load your gpg-agent.env file in to the environment

  This is extra useful if you use gpg-agent with --enable-ssh-support"
    (interactive)
    (let ((home (getenv "HOME"))
          (old-buffer (current-buffer)))
      (with-temp-buffer
        (insert-file-contents (concat home "/.gpg-agent-info"))
        (goto-char (point-min))
        (setq case-replace nil)
        (replace-regexp "\\(.*\\)=\\(.*\\)" "(setenv \"\\1\" \"\\2\")")
        (eval-buffer)))
    (message (getenv "GPG_AGENT_INFO")))

  (run-with-idle-timer 60 t 'my/gpg-agent)
  (my/gpg-agent)
#+END_SRC

#+RESULTS:
: /tmp/gpg-slIax0/S.gpg-agent:787:1
** ~delete-this-file~
:PROPERTIES:
:ID:       CA9C41F5-EE0D-41B5-A043-A46B4CDF30CC
:END:

#+BEGIN_SRC emacs-lisp
  (defun delete-this-file ()
    "Kill the current buffer and deletes the file it is visiting."
    (interactive)
    (let ((filename (buffer-file-name)))
      (when filename
        (when (y-or-n-p (format "Are you sure you want to delete %s?" filename))
          (if (vc-backend filename)
              (vc-delete-file filename)
            (progn
              (delete-file filename)
              (message "Deleted file %s" filename)
              (kill-buffer)))))))
#+END_SRC

#+RESULTS:
: delete-this-file

** Load host specific configuration
:PROPERTIES:
:ID:       5F712AF1-6399-4DA9-8845-F8D6419E1F6D
:END:

#+BEGIN_SRC emacs-lisp
  (let ((host-specific-config (expand-file-name (concat "~/.emacs.d/site-lisp/" (system-name) ".el")))) 
    (when (file-readable-p host-specific-config)
      (load-file host-specific-config)))
#+END_SRC
** Save session variables
:PROPERTIES:
:ID:       7BC58BA1-D455-4AAE-BBC9-AD52DC97B9CA
:END:
Save some variables between sessions.
#+begin_src emacs-lisp
  (use-package session
    :ensure t
    :hook (after-init . session-initialize))
#+end_src

#+RESULTS:
: t
** Disable ido-mode
:PROPERTIES:
:ID:       C5BD1D6A-2108-418D-B4E5-F69B364272F1
:END:
better-defaults enables ido-mode, but we're using selectrum.
#+begin_src emacs-lisp
  (ido-mode -1)
#+end_src
* Keybindings
** General keybindings
*** Increase and decrease text size
:PROPERTIES:
:ID:       F52E0A6A-E615-4D9A-91C1-F5F3FA989F29
:END:

#+BEGIN_SRC emacs-lisp 
(define-key global-map (kbd "C-+") 'text-scale-increase)
(define-key global-map (kbd "C--") 'text-scale-decrease)
#+END_SRC

** Evil Mode
:PROPERTIES:
:ID:       340D6E26-10E8-4456-8F96-84AF2E20D075
:END:

#+BEGIN_SRC emacs-lisp 

  (defun split-window-right-and-focus ()
    (interactive)
    (split-window-right)
    (other-window 1))

  (defun split-window-below-and-focus ()
    (interactive)
    (split-window-below)
    (other-window 1))

  (use-package undo-tree
    :diminish undo-tree-mode
    :ensure t
    :config
    (global-undo-tree-mode))

  (use-package evil
    :ensure t
    :defer .1
    :diminish evil-mode
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    :config
    ;; Make movement keys work over visual lines
    (define-key evil-normal-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
    (define-key evil-normal-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)
    (define-key evil-motion-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
    (define-key evil-motion-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)

    (evil-set-undo-system 'undo-tree)

    ;; Make * search over whole symbols instead of words. This means 
    ;; it will match "this-variable" rather than just "this".
    (setq-default evil-symbol-word-search 1)
    (setq-default evil-want-fine-undo t)

    ;; Make insert mode just like regular emacs
    (setq evil-insert-state-map (make-sparse-keymap))
    (define-key evil-insert-state-map (kbd "<escape>") 'evil-normal-state)


    (setq evil-move-cursor-back nil)

    (evil-mode 1)

    (use-package evil-surround
      :ensure t
      :diminish evil-surround-mode
      :config
      (global-evil-surround-mode 1))

    (use-package evil-matchit
      :ensure t
      :config
      (global-evil-matchit-mode 1)))

    (use-package evil-collection
      :after evil
      :straight t
      :config
      (evil-collection-init))
#+END_SRC

#+RESULTS:
: t

** General.el
:PROPERTIES:
:ID:       C3650B38-3717-4546-8831-F161203D2550
:END:

General.el is like evil-leader, but lets you define multiple leader keys / prefixes.

#+BEGIN_SRC emacs-lisp
  (use-package general
    :ensure t
    :config
    (general-auto-unbind-keys)
    (setq general-default-states '(normal motion))

    (general-create-definer leader-def
      :prefix "SPC"
      :keymaps '(normal motion override))

    (leader-def :infix "b"
      "" '(:ignore t :which-key "buffers")
      "k" 'kill-this-buffer
      "q" 'delete-window)

    ;; Bookmarks
    (leader-def :infix "bo"
      "" '(:ignore t :which-key "b[o]okmarks")
      "c" '(:which-key "config-file"
                       :def (lambda () (interactive) (find-file "~/.emacs.d/config.org")))
      "m" '(mu4e :which-key "mu4e")
      "o" '(:which-key "org-file"
                       :def (lambda () (interactive) (find-file "~/org/projects.org"))))

    (leader-def :infix "w"
      "" '(:ignore t :which-key "windows")
      "d" 'ace-delete-window
      "j" 'ace-window)

    (leader-def
      "|" 'split-window-right-and-focus
      "-" 'split-window-below-and-focus)

    (leader-def
      "a" 'org-agenda)

    (leader-def
      "g" 'magit-status)

    ;; Help
    (leader-def
      "h" (general-simulate-key "C-h"))

    (leader-def :infix "f"
      "" '(:ignore t :which-key "files")
      "d" 'delete-this-file
      "c" 'xah-copy-file-path
      "s" 'save-buffer)

    (defun lsp-find-definition-with-fallback ()
      (interactive)
      (let ((definition (lsp-find-definition)))
        (when (or (string-prefix-p "Not found for:" definition))
          (dumb-jump-go))))

    ;; JavaScript
    (general-define-key :keymaps '(typescript-mode-map javascript-mode-map)
                        "gf" 'lsp-find-definition-with-fallback)

    ;; Ruby
    (general-define-key :keymaps '(ruby-mode-map)
                        "gf" 'lsp-find-definition-with-fallback)

    ;; Use go-specific jumping for go-mode since it works wells
    (general-define-key :keymaps 'go-mode-map
                        "gf" 'godef-jump)

    ;; Clojure
    (general-define-key :keymaps 'cider-mode-map
                        "gf" 'cider-find-dwim)

    ;; Clojure shortcuts
    (leader-def :infix ","
      :keymaps 'clojure-mode-map
      "" '(:ignore t :which-key "Mode-specific")
      "c" 'cider
      "i" 'cider-inspect
      "e" 'cider-eval-defun-at-point
      "b" 'cider-eval-buffer
      "r" 'cider-switch-to-repl-buffer 
      "s" 'cider-selector)

    (general-define-key :keymaps 'cider-stacktrace-mode-map
                        "q" 'cider-popup-buffer-quit-function)

    (general-define-key :states '(emacs normal motion)
                        "C-x k" 'kill-this-buffer)

    (general-define-key :states '(emacs) :keymaps 'org-agenda-mode-map
                        "j" 'org-agenda-next-line
                        "k" 'org-agenda-previous-line)

    (leader-def
      :states '(normal)
      :keymaps 'outline-minor-mode-map
      "N" 'widen)

    (general-define-key :states '(normal)
                        :keymaps 'outline-minor-mode-map
                        "M-j" 'outline-next-visible-heading
                        "M-k" 'outline-previous-visible-heading
                        "M-K" 'outline-backward-same-level
                        "M-J" 'outline-forward-same-level)

    (leader-def :infix "p"
      "" '(:ignore t :which-key "projects")
      "p" 'projectile-switch-project
      "f" 'projectile-find-file
      "t" 'projectile-test-project)

    (general-define-key
     :states '(normal)
     "C-k" (lambda ()
             (interactive)
             (evil-scroll-up nil))
     "C-j" (lambda ()
             (interactive)
             (evil-scroll-down nil)))

    (general-define-key
     :states '(normal)
     :keymaps '(evil-normal-state-map org-mode-map)
     "C-k" (lambda ()
             (interactive)
             (evil-scroll-up nil))
     "C-j" (lambda ()
             (interactive)
             (evil-scroll-down nil)))

    (general-define-key
     :states '(normal)
     :keymaps 'pdf-view-mode-map
     "C-k" 'pdf-view-next-page-command
     "C-j" 'pdf-view-previous-page-command) 

    (general-define-key
     :states '(normal)
     "f" 'avy-goto-word-or-subword-1)

    (general-define-key
     :states '(normal)
     "gf" (lambda () 
            (interactive)
            (if current-prefix-arg
                (dumb-jump-go-other-window)
              (dumb-jump-go)))
     "gb" 'dumb-jump-back))
#+END_SRC

#+RESULTS:
: t

* Navigating
** Projectile
:PROPERTIES:
:ID:       BF2334AB-6DF8-4E15-8042-E82171E8E1AF
:END:
Projectile lets me switch between projects really easily. I set it up to default to ~projectile-commander~, which gives me options to choose what I want to do with a project once I open it.

#+BEGIN_SRC emacs-lisp 

  (use-package projectile
    :ensure t
    :diminish projectile-mode
    :config
    (setq projectile-enable-caching t)
    (projectile-global-mode)
    (setq projectile-completion-system 'default)
    (setq projectile-switch-project-action 'projectile-commander)
    (setq projectile-indexing-method 'hybrid)

    ;; Clear out all commander commands but the help item.
    (setq projectile-commander-methods (list (car projectile-commander-methods)))
    ;; (delete-if (lambda (el)
    ;;              (member (car el) '(?d ?a ?g)))
    ;;            projectile-commander-methods)


    ;; Use ag instead of projectile's default of find.
    ;; This lets me use .agignore files instead of projectile's
    ;; ignore file, which has never worked successfully for me.
    (setq projectile-generic-command
          (concat "ag -0 -l --nocolor"
                  (mapconcat #'identity (cons "" projectile-globally-ignored-directories) " --ignore-dir=")))

    ;; Workaround for tramp slowness (https://emacs.stackexchange.com/questions/17543/tramp-mode-is-much-slower-than-using-terminal-to-ssh)
    (setq projectile-mode-line "Projectile")

    (def-projectile-commander-method ?d
      "Open project root in dired"
      (projectile-dired)))

    (def-projectile-commander-method ?e
      "Open an [e]shell in the project root."
      (projectile-run-eshell))

    (def-projectile-commander-method ?f
      "Find files in the project."
      (projectile-find-file))

    (def-projectile-commander-method ?g
      "Open project root in magit"
      (projectile-vc))

#+END_SRC

#+RESULTS:
| 63 | Commander help buffer. | #[0 \3021 \303!0\202 \210\202 \210r\304!q\210\305c\210	\211\2031 \211@\306\307@A@#c\210A\266\202\202 \210eb\210\310 \210\311p\312"\210)\313 \207 [projectile-commander-help-buffer projectile-commander-methods (error) kill-buffer get-buffer-create Projectile Commander Methods: |



** Avy
:PROPERTIES:
:ID:       244C8DC3-D1B4-4ECA-BBB4-5F8B2C8FBB1C
:END:
Avy lets me jump around buffers and windows with hints.

#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :config
    ;; Favor home-row and surrounding keys
    (setq avy-keys
          '(?h ?j ?k ?l ?a ?s ?d ?f ?g ?y ?u ?i ?o ?p ?q ?w ?e ?r ?t ?n ?m ?z ?x ?c ?v ?b)))
#+END_SRC

#+RESULTS:
: t
** Ace-Window
:PROPERTIES:
:ID:       6F181FA4-52E3-44EB-A11D-1772CD6B9BB2
:END:
Ace window is like avy but for windows.

#+BEGIN_SRC emacs-lisp
    (use-package ace-window
      :ensure t
      :config
      (setq aw-keys '(?h ?j ?k ?l ?a ?s ?d ?f ?g ?y ?u ?i ?o ?p ?q ?w ?e ?r ?t ?n ?m ?z ?x ?c ?v ?b)))
#+END_SRC

#+RESULTS:
: t

ace-link is like ace-window but for links.

#+BEGIN_SRC emacs-lisp
  (use-package ace-link
    :ensure t
    :config
    (ace-link-setup-default))
#+END_SRC

#+RESULTS:
: t

** Winner mode
:PROPERTIES:
:ID:       289DCD3F-0814-40E7-AC50-AB2B8CB4A227
:END:
It records window configuration and lets you undo: 

#+BEGIN_SRC emacs-lisp
(winner-mode 1)
#+END_SRC
** Expand-region
:PROPERTIES:
:ID:       CDF6A76D-1BE3-47E5-AC13-F4C598FC619D
:END:

#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :config
    (global-set-key (kbd "C-=") 'er/expand-region))
#+END_SRC

#+RESULTS:
: t
** Mouse scrolling
:PROPERTIES:
:ID:       CDF5ADD8-90DA-4345-B8CB-44276917FBA1
:END:

Reduce the amount that the mouse scrolls.

#+BEGIN_SRC emacs-lisp
(setq mouse-wheel-scroll-amount '(3 ((shift) . 1) ((control) . nil)))
(setq mouse-wheel-progressive-speed nil)
#+END_SRC

#+RESULTS:
** Tags / dumb-jump
:PROPERTIES:
:ID:       F9E2141B-89A6-4324-B0AE-677E320B5EDE
:END:

#+BEGIN_SRC emacs-lisp
  (use-package dumb-jump
    :ensure t
    :commands (dumb-jump-go dumb-jump-go-back dumb-jump-go-other-window)
    :config
    (setq dumb-jump-selector 'completing-read)
    (setq dumb-jump-force-searcher 'rg))
#+END_SRC
** Tramp
:PROPERTIES:
:ID:       E5110BD4-6E30-4484-B6B1-91C2B416C805
:END:

#+BEGIN_SRC emacs-lisp
(setq tramp-verbose 6)
(setq tramp-default-method "ssh")
(setq tramp-ssh-controlmaster-options "")
(add-to-list 'backup-directory-alist
             (cons tramp-file-name-regexp nil))
(setq tramp-auto-save-directory temporary-file-directory)
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; TODO: unfortunately this doesn't quite work
  (defun tail-this-file ()
    (interactive)
    (dired-do-shell-command "tail -f * &" nil (dired-get-marked-files)))
#+END_SRC
*** Disable projectile for remote files
:PROPERTIES:
:ID:       2B4673D5-DF39-4494-8EEC-9204B509D969
:END:
#+BEGIN_SRC emacs-lisp
(defadvice projectile-project-root (around ignore-remote first activate)
    (unless (file-remote-p default-directory) ad-do-it))
#+END_SRC
*** Use bash for remote shell commands
:PROPERTIES:
:ID:       9C9CCB4A-7245-49EF-ADEC-83DC83C31EA6
:END:

#+BEGIN_SRC emacs-lisp
  (defun my/shell-set-hook ()
    (when (file-remote-p (buffer-file-name))
      (let ((vec (tramp-dissect-file-name (buffer-file-name))))
       ;; Please change "some-hostname" to your remote hostname
        (setq-local shell-file-name "/bin/bash")
        ;; (when (string-match-p "some-hostname" (tramp-file-name-host vec))
        ;;  (setq-local shell-file-name "/bin/bash")
        )))
        
(add-hook 'find-file-hook #'my/shell-set-hook)
#+END_SRC

#+RESULTS:
: my/shell-set-hook

** Outline mode
:PROPERTIES:
:ID:       1FF9B196-F342-4B23-BE1C-8D23AF50CFA3
:END:

#+BEGIN_SRC emacs-lisp
  (defvar outline-minor-mode-prefix "\M-#")

  (use-package outshine
    :general
    (:states '(normal) :keymaps 'outline-minor-mode-map
             "TAB" 'outshine-cycle
             "<backtab>" 'outshine-cycle-buffer)
    (leader-def
      :states '(normal)
      :keymaps 'outline-minor-mode-map
      "n" 'outshine-narrow-to-subtree)
    :ensure t)

#+END_SRC

#+RESULTS:
: t

** Copy file link
:PROPERTIES:
:ID:       45346A4E-9A4F-48D1-B763-65240A8A083B
:END:

#+BEGIN_SRC emacs-lisp
(defun xah-copy-file-path (&optional *dir-path-only-p)
  "Copy the current buffer's file path or dired path to `kill-ring'.
Result is full path.
If `universal-argument' is called first, copy only the dir path.
URL `http://ergoemacs.org/emacs/emacs_copy_file_path.html'
Version 2017-01-27"
  (interactive "P")
  (let ((-fpath
         (if (equal major-mode 'dired-mode)
             (expand-file-name default-directory)
           (if (buffer-file-name)
               (buffer-file-name)
             (user-error "Current buffer is not associated with a file.")))))
    (kill-new
     (if *dir-path-only-p
         (progn
           (message "Directory path copied: %s" (file-name-directory -fpath))
           (file-name-directory -fpath))
       (progn
         (message "File path copied: %s" -fpath)
         -fpath )))))
#+END_SRC

#+RESULTS:
: xah-copy-file-path
** PDF tools
:PROPERTIES:
:ID:       A0204B00-48E4-4D60-9EE3-5FF28ED6AD5B
:END:

#+begin_src emacs-lisp
  (setq pdf-info-epdfinfo-program "/usr/local/bin/epdfinfo")

  (use-package pdf-tools
    :ensure t
    :after evil
    :mode ("\\.pdf\\'" . pdf-view-mode)
    :config
    (custom-set-variables
     '(pdf-tools-handle-upgrades nil)) ;; Use brew upgrade pdf-tools instead
    (pdf-tools-install :no-query)

    (setq-default image-mode-winprops-alist nil)

    (leader-def :infix ","
      :keymaps 'pdf-view-mode-map
      "h" 'pdf-annot-add-highlight-markup-annotation
      "m" 'pdf-annot-add-annotation)

    (add-hook 'pdf-annot-edit-contents-minor-mode-hook (lambda ()
                                                         (org-mode)
                                                         ))
    )

  (use-package pdf-view-restore
    :ensure t
    :after pdf-tools
    :hook (pdf-view-mode . pdf-view-restore-mode))

  (use-package org-noter
    :defer t
    :ensure t)

  (use-package org-pdftools
    :ensure t
    :hook (org-mode . org-pdftools-setup-link))

  (use-package org-noter-pdftools
    :ensure t
    :after (org-noter)
    :commands org-noter-pdftools-jump-to-note
    :init
    (with-eval-after-load 'pdf-annot
      (add-hook 'pdf-annot-activate-created-annotations #'org-noter-pdftools-jump-to-note)))
#+end_src

#+RESULTS:
: t

** direnv
:PROPERTIES:
:ID:       44464C04-19FC-42EB-B528-95949E112FCE
:END:
#+begin_src emacs-lisp
  (use-package direnv
    :ensure t
    :config
    (direnv-mode))
#+end_src
** dired
:PROPERTIES:
:ID:       7EFB2948-5886-4C26-BD9A-46BB72651BAB
:END:

#+begin_src emacs-lisp
  (use-package dired
    :general
    ("C-x j" 'dired-jump)
    (leader-def
      "d" 'dired-jump)
    (:keymaps
     'dired-mode-map
     "h" 'dired-up-directory
     "l" 'dired-find-file)
    :config
    (setq dired-listing-switches "-alh")
    )

  (use-package diredfl
    :straight t
    :config
    (diredfl-global-mode)

    (set-face-attribute 'diredfl-dir-priv nil
                        :foreground (plist-get base16-tomorrow-night-colors :base0D)
                        :background (plist-get base16-tomorrow-night-colors :base00))

    (set-face-attribute 'diredfl-read-priv nil
                        :foreground (plist-get base16-tomorrow-night-colors :base0B)
                        :background (plist-get base16-tomorrow-night-colors :base00))

    (set-face-attribute 'diredfl-write-priv nil
                        :foreground (plist-get base16-tomorrow-night-colors :base0A)
                        :background (plist-get base16-tomorrow-night-colors :base00))

    (set-face-attribute 'diredfl-exec-priv nil
                        :foreground (plist-get base16-tomorrow-night-colors :base08)
                        :background (plist-get base16-tomorrow-night-colors :base00))

    (set-face-attribute 'diredfl-no-priv nil
                        :foreground (plist-get base16-tomorrow-night-colors :base03)
                        :background (plist-get base16-tomorrow-night-colors :base00))

    (set-face-attribute 'diredfl-dir-name nil
                        :foreground (plist-get base16-tomorrow-night-colors :base0C)
                        :background (plist-get base16-tomorrow-night-colors :base00))

    (set-face-attribute 'diredfl-symlink nil
                        :foreground (plist-get base16-tomorrow-night-colors :base05)
                        :background (plist-get base16-tomorrow-night-colors :base00))

    (set-face-attribute 'diredfl-dir-heading nil
                        :weight 'bold
                        :foreground (plist-get base16-tomorrow-night-colors :base0B)
                        :background (plist-get base16-tomorrow-night-colors :base00))

    (set-face-attribute 'diredfl-file-name nil
                        :foreground (plist-get base16-tomorrow-night-colors :base05)
                        :background (plist-get base16-tomorrow-night-colors :base00))

    (set-face-attribute 'diredfl-file-suffix nil
                        :foreground (plist-get base16-tomorrow-night-colors :base0B)
                        :background (plist-get base16-tomorrow-night-colors :base00))

    (set-face-attribute 'diredfl-number nil
                        :foreground (plist-get base16-tomorrow-night-colors :base0A)
                        :background (plist-get base16-tomorrow-night-colors :base00))

    (set-face-attribute 'diredfl-date-time nil
                        :foreground (plist-get base16-tomorrow-night-colors :base0D)
                        :background (plist-get base16-tomorrow-night-colors :base00)))
#+end_src

#+RESULTS:
: t

* UI
** Set the font
:PROPERTIES:
:ID:       3B6D865A-675A-445B-8294-86DEDF0045D6
:END:

#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist
               '(font . "Fira Code Medium"))

  (use-package ligature
    :straight (ligature :type git :host github :repo "mickeynp/ligature.el")
    :config
    (ligature-set-ligatures 't '("www"))

    ;; Enable ligatures in programming modes
    (ligature-set-ligatures 'prog-mode '("www" "**" "***" "**/" "*>" "*/" "\\\\" "\\\\\\" "{-" "::"
                                         ":::" ":=" "!!" "!=" "!==" "-}" "----" "-->" "->" "->>"
                                         "-<" "-<<" "-~" "#{" "#[" "##" "###" "####" "#(" "#?" "#_"
                                         "#_(" ".-" ".=" ".." "..<" "..." "?=" "??" ";;" "/*" "/**"
                                         "/=" "/==" "/>" "//" "///" "&&" "||" "||=" "|=" "|>" "^=" "$>"
                                         "++" "+++" "+>" "=:=" "==" "===" "==>" "=>" "=>>" "<="
                                         "=<<" "=/=" ">-" ">=" ">=>" ">>" ">>-" ">>=" ">>>" "<*"
                                         "<*>" "<|" "<|>" "<$" "<$>" "<!--" "<-" "<--" "<->" "<+"
                                         "<+>" "<=" "<==" "<=>" "<=<" "<>" "<<" "<<-" "<<=" "<<<"
                                         "<~" "<~~" "</" "</>" "~@" "~-" "~>" "~~" "~~>" "%%"))

    (global-ligature-mode 't))
#+END_SRC

#+RESULTS:
: t

** Dark title bar
:PROPERTIES:
:ID:       A4F9B025-8D9A-4244-930E-D77E20B10EEE
:END:

#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
  (add-to-list 'default-frame-alist '(ns-appearance . dark))
#+END_SRC

** Window / popup management
:PROPERTIES:
:ID:       26FA602F-89D6-41D3-B94D-F9C466AE774C
:END:

Always focus the cursor in help windows.

#+BEGIN_SRC emacs-lisp
  (setq help-window-select t)
#+END_SRC

#+RESULTS:
: t
*** Shackle
:PROPERTIES:
:ID:       30CF47DD-AD7D-4AED-9B92-E6B0525E5CAC
:END:
#+begin_src emacs-lisp

  (defun my-org-pop-to-buffer (orig-fn buf &optional norecord)
    (if shackle-mode
        (pop-to-buffer buf nil norecord)
      (funcall orig-fn buf norecord)))
  (advice-add 'org-switch-to-buffer-other-window :around #'my-org-pop-to-buffer)

  (defun my-suppress-delete-other-windows (orig-fn &rest args)
    (if shackle-mode
        (letf (((symbol-function 'delete-other-windows) #'ignore)
               ((symbol-function 'delete-window)        #'ignore))
          (apply orig-fn args))
      (apply orig-fn args)))

  (setq org-agenda-window-setup 'other-window)

  (use-package shackle
    :ensure t
    :init

    (setq shackle-rules
          '((help-mode :align below
                       :select t
                       :size 0.4
                       :popup t)
            (" *Agenda Commands*"
             :align below
             :size 0.4
             :popup t)
            ("*Org Agenda*" :align below :popup t :size 0.4))) 
    (shackle-mode))
#+end_src

** Scrolling
:PROPERTIES:
:ID:       3B9B25D7-3B43-4FD0-A03B-98A60E62BBAD
:END:

Make scrolling behavior more like vim:

#+BEGIN_SRC emacs-lisp
  (use-package smooth-scrolling
    :ensure t
    :config
    (smooth-scrolling-mode 1)
    (setq smooth-scroll-margin 5))
#+END_SRC

#+RESULTS:
: t

** Helm
:PROPERTIES:
:ID:       1ECD317A-3886-4E9D-BCF3-E1EA2BFB8542
:END:
Helm is out again for now. ~helm-M-x~ was getting unbearably slow. After switching to [[id:0D765ADF-6C61-4F8F-9885-4AE57A7526BD][Selectrum]], everything is super smooth.
#+BEGIN_SRC emacs-lisp
  ;; (use-package helm
  ;;   :ensure t
  ;;   :defer t
  ;;   :after (general projectile)
  ;;   :diminish helm-mode
  ;;   :config
  ;;   (require 'helm-config)
  ;;   (helm-mode 1)
  ;;   (global-set-key (kbd "M-x") 'helm-M-x)
  ;;   (global-set-key (kbd "M-y") 'helm-show-kill-ring)
  ;;   (global-set-key (kbd "C-x b") 'helm-mini)
  ;;   (global-set-key (kbd "C-h a") 'helm-apropos)
  ;;   (setq helm-buffer-max-length nil)
  ;;   (add-to-list 'completion-styles 'helm)
  ;;   (helm-autoresize-mode t)

  ;;   (require 'helm-imenu)

  ;;   (leader-def :infix "b"
  ;;     "b" 'helm-mini)

  ;;   (leader-def
  ;;     "x" 'helm-M-x)

  ;;   (leader-def :infix "f"
  ;;     "f" 'helm-find-files)

  ;;   (leader-def :infix "p"
  ;;     "a" 'helm-do-ag-project-root)

  ;;   (def-projectile-commander-method ?a
  ;;     "Full text search in the project."
  ;;     (helm-do-ag-project-root))

  ;;   (general-define-key :states '(normal)
  ;;                       "F" 'helm-semantic-or-imenu)

  ;;   (add-hook 'eshell-mode-hook
  ;;             (lambda()
  ;;               (define-key eshell-mode-map (kbd "M-r") 'helm-eshell-history)
  ;;               (define-key eshell-mode-map [remap eshell-pcomplete] 'helm-esh-pcomplete)
  ;;               (define-key eshell-mode-map (kbd "M-p") 'helm-eshell-history))))

  ;; (use-package helm-ag
  ;;   :ensure t
  ;;   :config
  ;;   (setq helm-ag-base-command "rg --no-heading --smart-case --hidden"))

  ;; (use-package helm-rg
  ;;   :ensure t)

  ;; (use-package helm-projectile
  ;;   :ensure t
  ;;   :config
  ;;   (helm-projectile-on))
#+END_SRC

#+RESULTS:
: t

** Selectrum
:PROPERTIES:
:ID:       0D765ADF-6C61-4F8F-9885-4AE57A7526BD
:END:
Selectrum is basically how I want completing-read to work. Simple, composable, fast.
#+begin_src emacs-lisp
  (use-package selectrum
    :straight (selectrum :type git :host github :repo "raxod502/selectrum")
    :config

    (plist-get base16-shell-colors-256 :base09)
    (set-face-attribute 'selectrum-current-candidate nil
                        :foreground (plist-get base16-tomorrow-night-colors :base09)
                        :background (plist-get base16-tomorrow-night-colors :base01))
    (set-face-attribute 'selectrum-primary-highlight nil
                        :foreground (plist-get base16-tomorrow-night-colors :base0E))
    (set-face-attribute 'selectrum-secondary-highlight nil
                        :foreground (plist-get base16-tomorrow-night-colors :base0D))

    (selectrum-mode +1)

    (leader-def :infix "f"
      "f" 'find-file)

    (leader-def 
      "x" 'execute-extended-command))

  (use-package consult
    :straight (consult :type git :host github :repo "minad/consult" :branch "main")
    :after projectile
    :bind (("C-x M-:" . consult-complex-command)
           ("C-c h" . consult-history)
           ("C-c m" . consult-mode-command)
           ("C-x b" . consult-buffer)
           ("C-x 4 b" . consult-buffer-other-window)
           ("C-x 5 b" . consult-buffer-other-frame)
           ("C-x r x" . consult-register)
           ("C-x r b" . consult-bookmark)
           ("M-g g" . consult-goto-line)
           ("M-g M-g" . consult-goto-line)
           ("M-g o" . consult-outline)
           ("M-g l" . consult-line)
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("M-g r" . consult-git-grep)
           ("M-g f" . consult-find)
           ("M-g i" . consult-project-imenu)
           ("M-g e" . consult-error)
           ("M-s m" . consult-multi-occur)
           ("M-y" . consult-yank-pop)
           ("<help> a" . consult-apropos))
    :init
    ;; Replace `multi-occur' with `consult-multi-occur', which is a drop-in replacement.
    (fset 'multi-occur #'consult-multi-occur)

    :config
    (autoload 'projectile-project-root "projectile")
    (setq consult-project-root-function #'projectile-project-root)

    (setq consult-narrow-key "<")

    (leader-def :infix "b"
      "b" 'consult-buffer)

    (general-define-key :states '(normal)
                        "F" 'consult-imenu)

    (defun consult-ripgrep-at-point ()
      (interactive)
      (consult-ripgrep default-directory (thing-at-point 'symbol)))

    (defun consult-project-ripgrep-at-point ()
      (interactive)
      (consult-ripgrep (projectile-project-root) (thing-at-point 'symbol)))

    (leader-def :infix "p"
      "a" 'consult-project-ripgrep-at-point)

    (def-projectile-commander-method ?a
      "Full text search in the project."
      (consult-project-ripgrep-at-point))

    (add-hook 'eshell-mode-hook
              (lambda()
                (define-key eshell-mode-map (kbd "M-r") 'consult-history))))

  (use-package consult-selectrum
    :straight (consult-selectrum :type git :host github :repo "minad/consult" :branch "main")
    :after selectrum
    :demand t)

  ;; Optionally add the `consult-flycheck' command.
  (use-package consult-flycheck
    :straight (consult-flycheck :type git :host github :repo "minad/consult" :branch "main")
    :bind (:map flycheck-command-map
                ("!" . consult-flycheck)))

  (use-package selectrum-prescient
    :straight (selectrum-prescient :type git :host github :repo "raxod502/prescient.el")
    :config
    (selectrum-prescient-mode +1)
    (prescient-persist-mode +1))

  (use-package embark
    :straight (embark :type git :host github :repo "oantolin/embark")
    :bind
    (:map selectrum-minibuffer-map
          ("C-j" . embark-act))

    :config
    (defun current-candidate+category ()
      (when selectrum-active-p
        (cons (selectrum--get-meta 'category)
              (selectrum-get-current-candidate))))

    (add-hook 'embark-target-finders #'current-candidate+category)

    (defun current-candidates+category ()
      (when selectrum-active-p
        (cons (selectrum--get-meta 'category)
              (selectrum-get-current-candidates
               ;; Pass relative file names for dired.
               minibuffer-completing-file-name))))

    (add-hook 'embark-candidate-collectors #'current-candidates+category)

    ;; No unnecessary computation delay after injection.
    (add-hook 'embark-setup-hook 'selectrum-set-selected-candidate)

    ;; Pop up which-key when running embark-act
    (setq embark-action-indicator
          (lambda (map)
            (which-key--show-keymap "Embark" map nil nil 'no-paging)
            #'which-key--hide-popup-ignore-command)
          embark-become-indicator embark-action-indicator)
    (setq embark-prompter 'embark-keymap-prompter))

  (use-package marginalia
    :straight (marginalia :type git :host github :branch "main" :repo "minad/marginalia")
    :bind (:map minibuffer-local-map
                ("C-M-a" . marginalia-cycle))
    :init
    (marginalia-mode)

    ;; When using Selectrum, ensure that Selectrum is refreshed when cycling annotations.
    (advice-add #'marginalia-cycle :after
                (lambda () (when (bound-and-true-p selectrum-mode) (selectrum-exhibit)))))

#+end_src

#+RESULTS:
: marginalia-cycle

** Tweaks
:PROPERTIES:
:ID:       9A1C9A6B-F1DA-4F28-90D4-C0FFE235674E
:END:
Enable column numbers in the modeline:

#+BEGIN_SRC emacs-lisp

  (column-number-mode)

#+END_SRC

#+RESULTS:
: t

Small padding:

#+begin_src emacs-lisp
  (set-fringe-mode 10)
#+end_src

#+RESULTS:
: ((ns-appearance . dark) (ns-transparent-titlebar . t) (horizontal-scroll-bars) (fullscreen . maximized) (vertical-scroll-bars) (left-fringe . 10) (right-fringe . 10))

** Beacon
:PROPERTIES:
:ID:       02E65DC6-7FC2-4673-964E-AEE554BF1966
:END:
Highlight the cursor whenever I scroll around.

#+begin_src emacs-lisp
    (use-package beacon
      :straight t
      :config
      (beacon-mode 1)
      (setq beacon-color (plist-get base16-tomorrow-night-colors :base02)))
#+end_src

** Dimmer
:PROPERTIES:
:ID:       B113A925-7B37-4C98-9FE6-60EF568C6E5E
:END:
Dim inactive buffers.

#+begin_src emacs-lisp
  (use-package dimmer
    :straight t
    :config
    (dimmer-mode t)
    (dimmer-configure-which-key)
    (dimmer-configure-company-box)
    (dimmer-configure-magit)
    (dimmer-configure-org)
    (add-to-list 'dimmer-buffer-exclusion-regexps "\\*Help\\*")
    (add-to-list 'dimmer-buffer-exclusion-regexps "\\*compilation-mode\\*")
    (add-to-list 'dimmer-buffer-exclusion-regexps "\\*mu4e-headers\\*")
    (add-to-list 'dimmer-buffer-exclusion-regexps "\\*mu4e-view\\*"))
#+end_src

* Writing
** Perfect Margin
:PROPERTIES:
:ID:       097C5D82-3DEF-471A-9AF6-DF7F5258D266
:END:

#+BEGIN_SRC emacs-lisp
  (use-package olivetti
    :ensure t
    :defer t
    :diminish olivetti
    :config
    (setq-default olivetti-body-width 100))

  (define-minor-mode write-mode
    "Write right"
    :lighter " write"
    (if (bound-and-true-p write-mode)
        (progn
          (diminish 'olivetti-mode)
          (diminish 'flyspell-mode)

          (company-mode -1)
          (olivetti-mode)
          (flyspell-mode))
      (progn
          (diminish-undo 'olivetti-mode)
          (diminish-undo 'flyspell-mode)

          (company-mode)
          (olivetti-mode -1)
          (flyspell-mode -1))))

  (defun org-capture-write-mode ()
    "Enable write-mode for journal captures."
    (let ((key (org-capture-get :key)))
      (cond
       ((equal key "j")
        (write-mode 1)))))

  (add-hook 'org-capture-mode-hook 'org-capture-write-mode)
#+END_SRC

#+RESULTS:
| org-capture-write-mode |

* Coding
** Testing
:PROPERTIES:
:ID:       283EAF79-A1DC-4EFF-B6CD-AE91C3C5AC5D
:END:

Install Jorgen Schaefer's ~tdd~ library, which lets me auto-run tests when a buffer is saved.

#+BEGIN_SRC emacs-lisp
  (use-package tdd
    :load-path "site-lisp/tdd/")
#+END_SRC

#+RESULTS:
** compilation-mode
:PROPERTIES:
:ID:       9E812C88-EB21-40CB-8F3D-AA737F78D7C6
:END:
Some defaults for compilation-mode.

First, handle colors as best as we can:

#+begin_src emacs-lisp
  (defun local/postprocess-compilation-buffer ()
    (goto-char compilation-filter-start)
    (when (looking-at "\033c")
      (delete-region (point-min) (match-end 0)))
    (ansi-color-apply-on-region (point) (point-max)))

  (add-hook 'compilation-filter-hook 'local/postprocess-compilation-buffer)
#+end_src

#+RESULTS:
| local/postprocess-compilation-buffer |

Scroll compilation until the first error:

#+begin_src emacs-lisp
  (setq compilation-scroll-output 'first-error)
#+end_src

#+RESULTS:
: first-error

** Indentation
:PROPERTIES:
:ID:       BD5E4B63-D866-479E-A0E4-FFC89E2B6AA0
:END:
Autodetect indentation: 

#+BEGIN_SRC emacs-lisp
  (use-package dtrt-indent
    :ensure t
    :config
    (dtrt-indent-mode))
#+END_SRC

#+RESULTS:
: t

** Autocomplete
:PROPERTIES:
:ID:       4CB28859-7E45-47B7-A0A5-9B2E7A7D1B6F
:END:

#+BEGIN_SRC emacs-lisp 
  (use-package company
    :ensure t
    :defer 0.1
    :config
    (setq company-idle-delay 0) 
    (setq company-minimum-prefix-length 1)
    (setq company-global-modes '(not org-mode eshell-mode))
    (global-company-mode)
    (define-key company-active-map (kbd "M-n") nil)
    (define-key company-active-map (kbd "M-p") nil)
    (define-key company-active-map (kbd "C-n") #'company-select-next)
    (define-key company-active-map (kbd "C-p") #'company-select-previous)

    ;; Certain helm-mode functions rely on 'helm being in completion-styles to
    ;; be able to use helm-style searching with e.g. helm-M-x.
    ;;
    ;; But that also causes completion-at-point using capf to be really slow,
    ;; since it does some non-prefix matching over really big lists.
    ;; To get around that, pin completion styles to remove 'helm when doing
    ;; company-capf
    (defun pin-completion-styles (orig-fn &rest args)
      (let ((completion-styles (remove 'helm completion-styles)))
        (apply orig-fn args)))

    (advice-add 'company-capf :around #'pin-completion-styles))
#+END_SRC

#+RESULTS:
: t

** Git
*** Magit
:PROPERTIES:
:ID:       5A7C93D2-2F53-47EA-BAE1-7F373979B30A
:END:
#+BEGIN_SRC emacs-lisp 
    (use-package magit
      :ensure t
      :commands (magit-get-current-branch)
      :defer t
      :config
      ;; Uncomment this to improve performance
      ;; (setq magit-refresh-status-buffer nil)
      ;; (setq magit-refresh-verbose t)
      )
#+END_SRC

#+RESULTS:
: t
*** Open GitHub from file
:PROPERTIES:
:ID:       0D190EFD-ED2F-4219-B777-18AEF8DD3245
:END:

#+BEGIN_SRC emacs-lisp
  (defun parse-host-path-syntax (host-path-string)
    (let ((ssh-host-path-regex "\\(.*\\)\@\\(.*\\):\\(.*\\)"))
      (string-match ssh-host-path-regex host-path-string)
      (let ((user (match-string 1 host-path-string))
            (host (match-string 2 host-path-string))
            (path (match-string 3 host-path-string)))
        `((user . ,user)
          (host . ,host)
          (path . ,path)))))

  (defun strip-dot-git (str)
    (replace-regexp-in-string "\.git$" "" str))

  (defun valid-url? (str)
    (url-host (url-generic-parse-url str)))

  (defun parse-url (str)
    (let ((url-obj (url-generic-parse-url str)))
      `((user . ,(url-user url-obj))
        (host . ,(url-host url-obj))
        (path . ,(url-filename url-obj)))))

  (defun infer-https-url (str)
    (let* ((parsed-host-path (if (valid-url? str)
                                 (parse-url str)
                                 (parse-host-path-syntax str)))
          (host (alist-get 'host parsed-host-path))
          (path (alist-get 'path parsed-host-path)))
      (concat "https://" host "/" (strip-dot-git path))))

  (defun get-remote-url (remote)
    (open-github--command-one-line "git" `("remote" "get-url" ,remote)))

  (defun infer-browse-url-from-remote (remote)
    (let ((origin-url (get-remote-url remote)))
      (infer-https-url origin-url)))

  (defun open-github--command-one-line (cmd args)
    (with-temp-buffer
      (when (zerop (apply 'call-process cmd nil t nil args))
        (goto-char (point-min))
        (buffer-substring-no-properties
         (line-beginning-position) (line-end-position)))))

  (defun open-github--branch ()
    (let ((branch (open-github--command-one-line "git" '("symbolic-ref" "HEAD"))))
      (if (not branch)
          (error "Failed: 'git symbolic-ref HEAD'")
        (replace-regexp-in-string "\\`refs/heads/" "" branch))))

  (defun open-github--highlight-marker (start end)
    (cond ((and start end (region-active-p))
           (format "#L%s..L%s" start end))
          (start
           (format "#L%s" start))
          (t "")))

  (require 'subr-x)

  (defun github-file-url (&optional default-branch)
    (let* ((branch (if default-branch default-branch (open-github--branch)))
           (current-file (buffer-file-name))
           (root (vc-git-root current-file))
           (repo-path (file-relative-name current-file root))
           (base-url (infer-browse-url-from-remote "origin"))
           (start-line (line-number-at-pos (if (region-active-p) (region-beginning) (point))))
           (end-line (- (line-number-at-pos (region-end)) 1))
           (marker (open-github--highlight-marker start-line end-line)))
      (format "%s/blob/%s/%s%s" base-url branch repo-path marker)))

  (defun github-url-save ()
    (interactive)
    (let ((url (github-file-url)) ) 
      (with-temp-buffer
        (insert url)
        (evil-yank (point-min) (point-max)))))

  (defun github-open-file ()
    (interactive)
    (browse-url (github-file-url (if current-prefix-arg "master" nil))))

  (defun org-store-github-link ()
    (interactive)
    (let* ((current-file (buffer-file-name))
           (root (vc-git-root current-file))
           (repo-path (file-relative-name current-file root))
           (github-link (github-file-url)))
      (add-to-list 'org-stored-links (list github-link repo-path))))
#+END_SRC

#+RESULTS:
: org-store-github-link

** Snippets
:PROPERTIES:
:ID:       ABBBC315-7938-42E6-BFAA-956938DF49C1
:END:

#+BEGIN_SRC emacs-lisp 
  (use-package yasnippet
    :ensure t
    :defer 0.1
    :config

    ;; Make Yasnippet work in Org
    (defun yas/org-very-safe-expand ()
      (let ((yas/fallback-behavior 'return-nil)) (yas/expand)))

    (add-hook 'org-mode-hook
              (lambda ()
                (make-variable-buffer-local 'yas/trigger-key)
                (setq yas/trigger-key [tab])
                (add-to-list 'org-tab-first-hook 'yas/org-very-safe-expand)
                (define-key yas/keymap [tab] 'yas/next-field)))

    (yas-global-mode 1))

  (use-package yasnippet-snippets
    :straight t)
#+END_SRC

** Lisp
:PROPERTIES:
:ID:       0E3D533F-D253-4E9C-A721-CCE2BBC97A4A
:END:

#+BEGIN_SRC emacs-lisp 
  (defvar my/lisp-mode-hooks
    '(emacs-lisp-mode-hook
      lisp-mode-hook
      lisp-interaction-mode-hook
      scheme-mode-hook
      clojure-mode-hook))

  (use-package evil-cleverparens
    :ensure t
    :commands (evil-cleverparens-mode)
    :init
    (dolist (mode my/lisp-mode-hooks)
      (add-hook mode #'evil-cleverparens-mode)))

  (use-package cider
    :ensure t
    :defer t
    :config)

  (use-package cljsbuild-mode
    :ensure t)

  (use-package clojure-mode
    :mode (("\\.clj\\'" . clojure-mode)
           ("\\.cljs\\'" . clojure-mode)
           ("\\.edn\\'" . clojure-mode))
    :ensure t)

  (use-package sicp

    :ensure t)

  (use-package geiser
    :ensure t
    :init
    (setq geiser-active-implementations '(chicken guile)))

  (use-package paredit
    :ensure t
    :commands (enable-paredit-mode)
    :init
    (dolist (mode my/lisp-mode-hooks)
      (add-hook mode #'enable-paredit-mode)))

  (use-package clj-refactor
    :ensure t
    :hook (clojure-mode . clj-refactor-mode)
    :config
    (cljr-add-keybindings-with-prefix "C-c RET"))

  (add-hook 'clojure-mode-hook #'yas-minor-mode)

  (use-package extempore-mode
    :ensure t)

  (defvar keyword-lambda
    '(("(\\(lambda\\)\\>"
       (0 (prog1 () (compose-region
                     (match-beginning 1)
                     (match-end 1) ?λ))))))
  (font-lock-add-keywords 'emacs-lisp-mode keyword-lambda)
#+END_SRC

#+RESULTS:

*** Chicken Scheme
:PROPERTIES:
:ID:       8FB8A7ED-1BC1-4E35-A3FE-74B806D978B1
:END:

#+BEGIN_SRC emacs-lisp
  ;; Indenting module body code at column 0
  (defun scheme-module-indent (state indent-point normal-indent) 0)
  (put 'module 'scheme-indent-function 'scheme-module-indent)

  (put 'and-let* 'scheme-indent-function 1)
  (put 'parameterize 'scheme-indent-function 1)
  (put 'handle-exceptions 'scheme-indent-function 1)
  (put 'when 'scheme-indent-function 1)
  (put 'unless 'scheme-indent-function 1)
  (put 'match 'scheme-indent-function 1)
#+END_SRC

#+RESULTS:
: 1

** Python
*** Virtualenv
:PROPERTIES:
:ID:       DD126725-5346-49C2-B480-49A306D3BEBB
:END:

pyvenv is nice because it lets me choose between virtualenvs made through mkvirtualenvwrapper and virtulenvs that are in other places on the filesystem.

We also set up eshell so that it shares its environment with emacs, thus using the virtualenv if it is set.

#+BEGIN_SRC emacs-lisp 

  (use-package pyvenv
    :ensure t
    :config
    (setq eshell-modify-global-environment t)
    (add-hook 'pyvenv-post-activate-hooks (lambda ()
                                            (setq eshell-path-env (getenv "PATH"))))
    (add-hook 'pyvenv-post-deactivate-hooks (lambda ()
                                            (setq eshell-path-env (getenv "PATH"))))
    )

#+END_SRC

#+RESULTS:
: t
*** Refactoring
:PROPERTIES:
:ID:       4BC8C17C-C6B0-4BBF-AFA4-994B0236F2EE
:END:

#+BEGIN_SRC emacs-lisp
  (use-package elpy
    :ensure t
    :hook (python-mode . elpy-enable)
    :config
    ;; Set pytest as the default test runner
    (elpy-set-test-runner 'elpy-test-pytest-runner)

    ;; Temporary workaround for a warning that comes up: https://github.com/jorgenschaefer/elpy/issues/887
    (setq python-shell-completion-native-enable nil))
#+END_SRC

#+RESULTS:
: t
*** Formatting
:PROPERTIES:
:ID:       1B99C5E6-293A-422F-81C3-8251F7F4B3AD
:END:

#+BEGIN_SRC emacs-lisp
  (use-package py-yapf
    :ensure t
    :config
    (add-hook 'python-mode-hook 'py-yapf-enable-on-save))
#+END_SRC

#+RESULTS:
: t

** JSON
:PROPERTIES:
:ID:       350A7222-2A8F-4037-8BD1-347CD0C90BAD
:END:
#+BEGIN_SRC emacs-lisp 
  (use-package json-mode
    :ensure t
    :mode ("\\.json\\'" . json-mode))
#+END_SRC
** Markdown
:PROPERTIES:
:ID:       30E9F641-ACD0-4398-A3BB-9716A426ECC9
:END:
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :mode (("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :ensure t)
#+END_SRC

** Swift
:PROPERTIES:
:ID:       EADEFE22-46E5-4861-A15A-CC42BCA05237
:END:
#+BEGIN_SRC emacs-lisp 

  (use-package swift-mode
    :ensure t
    :mode ("\\.swift\\'" . swift-mode))

#+END_SRC
** CoffeeScript
:PROPERTIES:
:ID:       212AD2FD-FB6C-4A4C-B09A-D064AF0AE7DA
:END:
#+BEGIN_SRC emacs-lisp 

  (use-package coffee-mode
    :ensure t
    :mode ("\\.coffee\\'" . coffee-mode))

#+END_SRC
** JavaScript
*** REPL
:PROPERTIES:
:ID:       72787F88-9631-4EAD-9616-F4C3B7AB39A2
:END:
js-comint lets me run a repl inside emacs where I can evaluate JavaScript.

#+BEGIN_SRC emacs-lisp 

  (use-package js-comint
    :defer t
    :ensure t)

#+END_SRC
*** Indentation
:PROPERTIES:
:ID:       C233C8A6-8164-444A-A086-122954AA02EC
:END:

I typically use 2 spaces to indent.

#+BEGIN_SRC emacs-lisp
  (setq js-indent-level 2)
#+END_SRC
*** Typescript
:PROPERTIES:
:ID:       72DBDD29-1F36-4267-B3FC-FB84130EE7D8
:END:

#+BEGIN_SRC emacs-lisp
  (use-package typescript-mode
    :mode ("\\.tsx?\\'" . typescript-mode)
    :ensure t)
#+END_SRC

#+RESULTS:

** Haskell
:PROPERTIES:
:ID:       4811EAA8-E6B9-49B1-BCFB-089D434DDCDF
:END:
#+BEGIN_SRC emacs-lisp 

  (use-package haskell-mode
    :mode ("\\.hs\\'" . haskell-mode)
    :ensure t)

  (use-package lsp-haskell
    :ensure t
    :hook ((haskell-mode . lsp))
    :init
    (add-hook 'haskell-literate-mode-abbrev-table #'lsp)
    (setq lsp-haskell-server-wrapper-function
          (lambda (argv)
            (append
             (append (list "nix-shell" "-I" "." "--command" )
                     (list (mapconcat 'identity argv " "))
                     )
             (list (nix-current-sandbox))))))
#+END_SRC

#+RESULTS:
: t

** Docker
*** Dockerfile mode
:PROPERTIES:
:ID:       9C1FAC61-D34D-4F8C-9A58-C277E8CCDFBF
:END:
#+BEGIN_SRC emacs-lisp

  (use-package dockerfile-mode
    :ensure t)

#+END_SRC

#+RESULTS:
*** Docker mode
:PROPERTIES:
:ID:       36FBFB0B-4E31-4558-ADB4-FAA6E5D96093
:END:
[[https://github.com/Silex/docker.el][Docker mode]] lets me run various docker commands.

#+BEGIN_SRC emacs-lisp 

  (use-package docker
    :ensure t
    :defer t
    :diminish docker-mode)

#+END_SRC

#+RESULTS:
: t

*** Environment variables
:PROPERTIES:
:ID:       7EE17567-AA99-4CE8-A79E-3520770E8BF9
:END:
~docker-machine env default~ produces these environment variables, which must be set to use Docker.

#+BEGIN_SRC emacs-lisp
  (setenv "DOCKER_TLS_VERIFY" "1")
  (setenv "DOCKER_HOST" "tcp://192.168.99.100:2376")
  (setenv "DOCKER_CERT_PATH" "/Users/mark/.docker/machine/machines/default")
  (setenv "DOCKER_MACHINE_NAME" "default")
#+END_SRC

#+RESULTS:
: default
** Shell
*** eshell
:PROPERTIES:
:ID:       A2574E62-8ACC-4781-99F3-568B12C53737
:END:
#+BEGIN_SRC emacs-lisp
  (use-package eshell
    :commands (eshell)
    :config
    (defun esh-customize-faces ()
      (set-face-attribute 'eshell-ls-directory
                          nil
                          :foreground (plist-get base16-tomorrow-night-colors :base0C)
                          :background (plist-get base16-tomorrow-night-colors :base00)))

    (defmacro esh-section (name form &rest props)
      `(setq ,name
             (lambda ()
               (when ,form
                 (-> ,form
                     (propertize 'face (list ,@props)))))))

    (defun esh-acc (acc x)
      (if-let ((section (funcall x)))
          (if (string-empty-p acc)
              section
            (concat acc esh-sep section))
        acc))

    (defun esh-prompt-func ()
      (concat
       (reduce #'esh-acc esh-funcs :initial-value "")
       ;; Reset face to default for input
       (propertize " " 'face 'default)))

    (esh-section esh-header
                 "λ"
                 `(:foreground ,(plist-get base16-tomorrow-night-colors :base08)))

    (esh-section esh-user
                 (user-login-name)
                 `(:foreground ,(plist-get base16-tomorrow-night-colors :base0B)))

    (esh-section esh-dir
                 (concat "[" (abbreviate-file-name (eshell/pwd)) "]")
                 `(:foreground ,(plist-get base16-tomorrow-night-colors :base0E)))

    (esh-section esh-git
                 (when-let ((branch (magit-get-current-branch))) 
                   (concat " " branch))
                 `(:foreground ,(plist-get base16-tomorrow-night-colors :base0D)))

    (esh-section esh-footer
                 "\n→"
                 `(:foreground ,(plist-get base16-tomorrow-night-colors :base0A)))

    (setq eshell-prompt-regexp "\n→ ")
    (setq eshell-skip-prompt-function #'eshell-skip-prompt)
    (setq esh-sep " ")
    (setq esh-funcs (list esh-header esh-user esh-dir esh-git esh-footer))

    (setq eshell-prompt-function 'esh-prompt-func)

    (add-hook 'eshell-mode-hook 'esh-customize-faces))
#+END_SRC

#+RESULTS:
: t

** YAML
:PROPERTIES:
:ID:       85004FDB-D2C8-4D10-8FF4-059F162C3B97
:END:

#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :ensure t)
#+END_SRC
** Lua
:PROPERTIES:
:ID:       B9FDDCAF-2B95-40C2-9F1B-0F0D3C380EA0
:END:

#+BEGIN_SRC emacs-lisp
  (use-package lua-mode
    :ensure t)
#+END_SRC
** HTML
:PROPERTIES:
:ID:       04225799-D506-4181-A501-077BCF27C5E1
:END:

Let's use web-mode, which supports font locking for templating.

#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :mode (("\\.html\\'" . web-mode)
           ("\\.html\\.erb\\'" . web-mode)
           ("\\.mustache\\'" . web-mode)
           ("\\.jinja\\'" . web-mode)
           ("\\.hbs\\'" . web-mode))
    :ensure t
    :config
    (setq web-mode-markup-indent-offset 2)
    (setq web-mode-css-indent-offset 2)
    (setq web-mode-code-indent-offset 2))
#+END_SRC

#+RESULTS:
** PHP
:PROPERTIES:
:ID:       57DD3C16-3880-4B6A-A116-B34509666648
:END:

#+BEGIN_SRC emacs-lisp
  (use-package php-mode
    :ensure t
    :mode ("\\.php\\'" . php-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  ;; (use-package phpunit
  ;;   :load-path "~/.emacs.d/site-lisp/phpunit"
  ;;   :config
  ;;     (general-define-key
  ;;      :states '(normal)
  ;;      :keymaps 'php-mode-map
  ;;      :prefix "C-c"
  ;;      "C-t" 'phpunit-current-test))
#+END_SRC
** LaTeX
:PROPERTIES:
:ID:       BE8826FB-91A0-41E9-B4EE-B6230F333817
:END:

#+BEGIN_SRC emacs-lisp
  (use-package auctex
    :ensure t
    :mode ("\\.tex\\'" . latex-mode)
    :commands (latex-mode LaTeX-mode plain-tex-mode))
#+END_SRC

#+RESULTS:
** API exploration
:PROPERTIES:
:ID:       6AF8C327-1DF8-4F41-86DC-0DC0B40F5F47
:END:

#+BEGIN_SRC emacs-lisp
  (use-package restclient
    :defer t
    :ensure t)
#+END_SRC
** Go
:PROPERTIES:
:ID:       902F963C-3D6A-4A23-A383-847EC6971E31
:END:

#+BEGIN_SRC emacs-lisp
  (use-package go-mode
    :ensure t
    :mode (("go\\.mod\\'" . go-dot-mod-mode)
           ("\\.go\\'" . go-mode))
    :config
    (add-hook 'go-mode-hook #'lsp-go-install-save-hooks))

  (use-package gotest
    :defer t
    :ensure t)
#+END_SRC

#+RESULTS:

** Ruby
:PROPERTIES:
:ID:       B5DE9017-8256-4B7E-9157-BE42487EC143
:END:

#+BEGIN_SRC emacs-lisp
  (use-package inf-ruby
    :ensure t
    :hook (ruby-mode . inf-ruby-minor-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package robe
    :ensure t
    :hook (ruby-mode . robe-mode))
#+END_SRC

#+RESULTS:
: t

#+BEGIN_SRC emacs-lisp
  (use-package seeing-is-believing
    :ensure t
    :config
    (add-hook 'ruby-mode-hook 'seeing-is-believing))
#+END_SRC


#+BEGIN_SRC emacs-lisp
    (use-package rbenv
      :ensure t
      :init
      (setq-default rbenv-installation-dir "/usr/local/Cellar/rbenv/1.1.2/")
      (defun my/ruby-init ()
        (rbenv-use-corresponding))
      (add-hook 'ruby-mode-hook 'my/ruby-init)
      :config
      (setq rbenv-show-active-ruby-in-modeline nil)
      (global-rbenv-mode)
      (rbenv-use-global)
  )
#+END_SRC

#+RESULTS:
: t

#+BEGIN_SRC emacs-lisp
  (use-package rspec-mode
    :init
    (defun my/rspec-init ()
      (linum-mode -1)
      (local-set-key (kbd "r") 'inf-ruby-switch-from-compilation))
    (add-hook 'rspec-compilation-mode-hook 'my/rspec-init)
    :ensure t)
#+END_SRC

#+RESULTS:
: t
** Common Lisp
:PROPERTIES:
:ID:       7F5509D9-9207-4999-9800-7E1D315501CD
:END:

#+BEGIN_SRC emacs-lisp
  (use-package slime
    :ensure t
    :defer t
    :config
    (setq inferior-lisp-program "/usr/local/bin/sbcl")
    (setq slime-contribs '(slime-fancy)))
#+END_SRC

#+RESULTS:
: t

#+BEGIN_SRC emacs-lisp
  (use-package bundler
    :ensure t
    )
#+END_SRC

#+RESULTS:

*** Sorbet
:PROPERTIES:
:ID:       8688A8E7-694F-4C95-9A44-3C26CD0DB018
:END:
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.rbi$" . ruby-mode))
#+END_SRC

** LSP
:PROPERTIES:
:ID:       C0674ED2-A9C5-41FB-9D18-2B8BF72D5E80
:END:
#+begin_src emacs-lisp
  (use-package lsp-mode
    :ensure t
    :commands (lsp lsp-deferred)
    :hook ((go-mode . lsp-deferred)
           (typescript-mode . lsp-deferred)
           (rust-mode . lsp-deferred)
           (ruby-mode . lsp-deferred))
    :config
    (require 'lsp-go)
    (require 'lsp-solargraph)
    (customize-set-variable 'lsp-solargraph-use-bundler nil)
    (customize-set-variable 'lsp-solargraph-multi-root nil)

    (setq lsp-log-io nil)
    (setq lsp-clients-typescript-server-args '("--stdio")))

  (defun lsp-go-install-save-hooks ()
    (add-hook 'before-save-hook #'lsp-format-buffer t t)
    (add-hook 'before-save-hook #'lsp-organize-imports t t))

  (use-package lsp-ui
    :ensure t
    :commands lsp-ui-mode)

  (use-package company-lsp
    :ensure t
    :commands company-lsp)

  (use-package yasnippet
    :ensure t
    :commands yas-minor-mode
    :hook (go-mode . yas-minor-mode))

  (setq gc-cons-threshold 100000000)
  (setq read-process-output-max (* 1024 1024))
  (setq lsp-prefer-capf t)

#+end_src

#+RESULTS:
: t

** Rust
:PROPERTIES:
:ID:       623A55CD-8210-4860-9772-8BAEB90B37EB
:END:

#+begin_src emacs-lisp
  (use-package rust-mode
    :ensure t
    :after general
    :config
    (add-hook 'rust-mode-hook
              (lambda () (setq indent-tabs-mode nil)))
    (setq rust-format-on-save t)
    (general-define-key :keymaps '(rust-mode-map)
                        "gf" 'lsp-find-definition))
  
#+end_src

#+RESULTS:
: t
** Vim
:PROPERTIES:
:ID:       A3CE1618-A7F9-4E4E-AC71-AB3AD9CD5781
:END:

*gasp*

#+BEGIN_SRC emacs-lisp
  (use-package vimrc-mode
    :ensure t
    :init
    (add-to-list 'auto-mode-alist '("\\.tridactyl\\(rc\\)?\\'" . vimrc-mode))
    (add-to-list 'auto-mode-alist '("\\.vim\\(rc\\)?\\'" . vimrc-mode)))
#+END_SRC

#+RESULTS:

** Nix
:PROPERTIES:
:ID:       669D7530-EA99-4183-A0E6-560FC3A95985
:END:

#+begin_src emacs-lisp
  (use-package nix-mode
    :straight (nix-mode :type git :host github :repo "NixOS/nix-mode")
    :mode "\\.nix\\'")

  (use-package nix-sandbox
    :ensure t
    :config
    (setq haskell-process-wrapper-function
          (lambda (args) (apply 'nix-shell-command (nix-current-sandbox) args))))
#+end_src

#+RESULTS:
: t

** Solidity
:PROPERTIES:
:ID:       0104B1F8-934D-4830-8927-735D24900774
:END:

#+begin_src emacs-lisp
  (use-package solidity-mode
    :ensure t
    :mode ("\\.sol\\'" . solidity-mode)
    :config
    (setq solidity-comment-style 'slash))

  (use-package solidity-flycheck
    :straight (solidity-flycheck :type git :host github :repo "ethereum/emacs-solidity")
    :defer t
    :init
    (setq solidity-flycheck-solium-checker-active t)
    (setq solidity-flycheck-solc-checker-active t)
    (setq solidity-flycheck-chaining-error-level t)
    (setq solidity-flycheck-use-project t)
    (setq solidity-flycheck-solc-additional-allow-paths '("~/.brownie/packages"))

    (add-hook
     'solidity-mode-hook
     (lambda ()
       (require 'solidity-flycheck))))

  (use-package company-solidity
    :straight (company-solidity :type git :host github :repo "ethereum/emacs-solidity")
    :defer t
    :init
    (add-hook 'solidity-mode-hook
              (lambda ()
                (set (make-local-variable 'company-backends)
                     '((company-dabbrev-code company-solidity company-capf))))))
#+end_src

#+RESULTS:
| lambda | nil | (set (make-local-variable 'company-backends) (append '((company-dabbrev-code company-solidity company-capf)) company-backends)) |                                                |                                                 |                                        |                                                                             |                              |
| lambda | nil | (setq solidity-flycheck-solium-checker-active t)                                                                                | (setq solidity-flycheck-solc-checker-active t) | (setq solidity-flycheck-chaining-error-level t) | (setq solidity-flycheck-use-project t) | (setq solidity-flycheck-solc-additional-allow-paths '(~/.brownie/packages)) | (require 'solidity-flycheck) |

* Org Mode
I use Org Mode to take notes for work and personal.

** My files
:PROPERTIES:
:ID:       B6E231A4-E1E0-4B31-A94A-B77556EA9A4F
:END:
#+BEGIN_SRC emacs-lisp 

  (defun my/configure-org-directories ()
    (setq org-directory "~/org")
    (setq org-default-notes-file "~/org/inbox.org")
    (setq org-refile-use-outline-path 'file)
    (setq org-outline-path-complete-in-steps nil)
    (setq org-agenda-files (quote ("~/org")))
    (setq org-refile-targets '((org-agenda-files . (:maxlevel . 4)))))

#+END_SRC

#+RESULTS:
: my/configure-org-directories

** General configuration
*** Open links in new frames
:PROPERTIES:
:ID:       E66AA57E-B87B-4061-A759-5DA057FD43F7
:END:

Here's a function that lets me open org links in a new frame. The default behavior is opening a link in a new buffer in the same frame, which doesn't always fit with my workflow -- sometimes I have org open in a separate frame, with the main editing frame on a different monitor.

#+BEGIN_SRC emacs-lisp
  (require 'cl)

  (defun org-open-other-frame ()
    "Jump to bookmark in another frame. See `bookmark-jump' for more."
    (interactive)
    (let ((org-link-frame-setup (acons 'file 'find-file-other-frame org-link-frame-setup)))
      (org-open-at-point)))
#+END_SRC

#+RESULTS:
: org-open-other-frame
*** Log drawer
:PROPERTIES:
:ID:       CAB168D1-1C3A-40B8-9E1A-423C6E299E35
:END:
I can type timestamped notes for a given tree with ~C-c C-z~. By default, they are appending to the top of the note. Let's stash then in the ~LOGBOOK~ drawer instead.

#+BEGIN_SRC emacs-lisp

  (setq org-log-into-drawer t)

#+END_SRC

#+RESULTS:
: t

*** Variable pitch mode
:PROPERTIES:
:ID:       00F44005-6DE0-4E49-B050-C50F541A6564
:END:

#+BEGIN_SRC emacs-lisp 

  (defun my/org-variable-pitch ()
    "Use variable pitch for prose text in org."
    (interactive)
    (variable-pitch-mode t)
    (set-face-attribute 'org-table nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-block nil :inherit 'fixed-pitch))

#+END_SRC

#+RESULTS:
: my/org-variable-pitch

*** Org babel languages and configuration
:PROPERTIES:
:ID:       7D5EE46F-E0A4-41BA-8065-0F59CDFE6996
:END:

#+BEGIN_SRC emacs-lisp
  (defun my/org-babel-config () 
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (python . t)
       (plantuml . t)
       (shell . t))))
#+END_SRC

#+RESULTS:
: my/org-babel-config

*** Putting it together
:PROPERTIES:
:ID:       BF11708D-FD2F-4DD6-9FBF-6A3324D8A402
:END:
#+BEGIN_SRC emacs-lisp 

  (defun my/configure-org ()
    (require 'org-tempo)
    (setq org-image-actual-width 300)
    (setq org-src-fontify-natively t)
    (setq org-fontify-done-headline nil)
    (setq org-log-done 'time)

    (setq org-src-window-setup 'current-window)

    (setq org-startup-truncated 'nil)
    (setq org-catch-invisible-edits 'smart)

    ;; Do not dim blocked tasks
    (setq org-agenda-dim-blocked-tasks nil)

    ;; Start up in org-indent-mode
    (setq org-startup-indented t)
    ;; Diminish org-indent-mode in the mode-line
    (eval-after-load 'org-indent '(diminish 'org-indent-mode))
    (setq org-hide-emphasis-markers t)

    (setq org-format-latex-options (plist-put org-format-latex-options :scale 1.5))

    (progn
      (set-face-attribute 'org-level-1 nil :height 1.5 :weight 'bold)
      (set-face-attribute 'org-level-2 nil :height 1.25 :weight 'bold)
      (set-face-attribute 'org-level-3 nil :height 1.1 :weight 'bold)
      (set-face-attribute 'org-level-4 nil :height 1.1 :weight 'bold)
      (set-face-attribute 'org-level-5 nil :weight 'bold)
      (set-face-attribute 'org-level-6 nil :weight 'bold)
      (set-face-attribute 'org-level-7 nil :weight 'bold)
      (set-face-attribute 'org-level-8 nil :weight 'bold)

      (set-face-attribute 'org-special-keyword nil :foreground "gray25")
      (set-face-attribute 'org-date nil :foreground "gray25")

      (set-face-attribute 'org-drawer nil :foreground "grey25"))

    (font-lock-add-keywords 'org-mode
                            '(("^ +\\([-*]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•")))))))

  (defun my/org-mode ()
    (visual-line-mode 1))

  (setq-default fill-column 85)

  (use-package org-z
    :straight (org-z :type git :host github :repo "landakram/org-z")
    :config
    (org-z-mode 1))

  (use-package org-z-selectrum
    :straight (org-z-selectrum :type git :host github :repo "landakram/org-z"))
#+END_SRC

#+RESULTS:

** Keyboard shortcuts
*** Agenda
:PROPERTIES:
:ID:       D91B4095-128B-4BA7-99B3-BABAFAA4FDFD
:END:

#+BEGIN_SRC emacs-lisp 
  (general-define-key
   :states '(emacs)
   :keymaps 'org-agenda-mode-map
   :prefix ""
   "c" 'org-agenda-capture)
#+END_SRC

#+RESULTS:

** Editing
*** Useful functions
:PROPERTIES:
:ID:       7BF50ED6-95B7-4801-8F0E-910BF84B0AFB
:END:

#+BEGIN_SRC emacs-lisp 

  (defun org-insert-subheading-after-current ()
    (interactive)
    (org-insert-heading-after-current)
    (org-demote))

  (defun org-insert-subheading-after-current-and-enter-insert ()
    (interactive)
    (org-insert-subheading-after-current)
    (evil-append 0))

  (defun org-insert-subheading-and-enter-insert ()
    (interactive)
    (org-insert-subheading nil)
    (evil-append 0))

  (defun org-insert-heading-after-current-and-enter-insert ()
    (interactive)
    (org-insert-heading-after-current)
    (evil-append 0))

  (defun org-insert-heading-and-enter-insert ()
    (interactive)
    (org-insert-heading)
    (evil-append 0))

  (defun org-insert-todo-after-current-and-enter-insert ()
    (interactive)
    (org-insert-todo-heading-respect-content)
    (evil-append 0))

#+END_SRC

#+RESULTS:
: org-insert-todo-after-current-and-enter-insert

** Tasks
:PROPERTIES:
:ID:       33F2269C-EEE6-4108-A6C8-3A0BE48EEECC
:END:

#+BEGIN_SRC emacs-lisp 

  (defun my/configure-org-todos ()
    (setq org-todo-keywords
          (quote ((sequence "TODO(t)" "STARTED(s)" "MAYBE(m)" "REPEATING(r)" "|" "DONE(d)")
                  (sequence "WAITING(w@/!)" "HOLD(h@/!)" "DELEGATED(e)" "|" "CANCELLED(c@/!)" "PHONE" "MEETING"))))

    (setq org-todo-keyword-faces
          (quote (("TODO" :foreground "red" :weight bold)
                  ("NEXT" :foreground "blue" :weight bold)
                  ("DONE" :foreground "forest green" :weight bold)
                  ("WAITING" :foreground "orange" :weight bold)
                  ("HOLD" :foreground "magenta" :weight bold)
                  ("CANCELLED" :foreground "forest green" :weight bold)
                  ("MEETING" :foreground "forest green" :weight bold)
                  ("PHONE" :foreground "forest green" :weight bold))))

    (setq org-use-fast-todo-selection t))

#+END_SRC

#+RESULTS:
: my/configure-org-todos

** Agenda
:PROPERTIES:
:ID:       F795FCB9-5F9F-459A-92A1-E46585933E9E
:END:

#+BEGIN_SRC emacs-lisp 
(setq org-agenda-span 2)
#+END_SRC
*** Super agenda
:PROPERTIES:
:ID:       23DEE77C-53D8-4B1B-AAA9-6F576BE74060
:END:
#+begin_src emacs-lisp
  (use-package org-super-agenda
    :straight t
    :hook (org-agenda-mode . org-super-agenda-mode)
    :config
    ;; See https://github.com/alphapapa/org-super-agenda/issues/50
    (setq org-super-agenda-header-map (make-sparse-keymap))
    (setq org-super-agenda-header-separator "")
    (setq org-super-agenda-unmatched-name "Scheduled")
    (setq org-super-agenda-groups
          '((:name "Important"
                   :priority "A")
            (:name "Habits"
                   :habit t)))
    )
#+end_src

** Exporters
:PROPERTIES:
:ID:       4597FA54-FEFF-43A7-8372-E471711AE93C
:END:
#+BEGIN_SRC emacs-lisp 

  (defun my/configure-org-exporters ()
    (use-package ox-gfm
      :ensure t)

    (use-package org-habit)

    (use-package ox-odt
      :config
      (setq org-odt-preferred-output-format "rtf"))

    (use-package ox-jira
      :ensure t)

    (use-package ox-rst
      :ensure t))
#+END_SRC

#+RESULTS:
: my/configure-org-exporters

** JIRA
:PROPERTIES:
:ID:       032A22E0-8CFD-46C2-8FE7-20E27318BCA5
:END:
I often link to JIRA issues in my tasks. This function lets me add link JIRA issues by issue title rather than needing to paste in the full link.

#+BEGIN_SRC emacs-lisp

  (defvar default-jira-repository)
  (setq default-jira-repository "getclef.atlassian.net")

  (defun org-jira-insert-link (issue-name description)
    "Add links to JIRA issues by title."
    (interactive "sIssue: \nsDescription: ")
    (let ((desc (if (string= "" description) issue-name description))) 
      (org-insert-link nil (concat "https://" default-jira-repository "/browse/" issue-name) desc)))

#+END_SRC

#+RESULTS:
: org-jira-insert-link
** Capture
:PROPERTIES:
:ID:       C62177A9-A7FE-42BD-9D4B-4BA31F4A9DD0
:END:

#+BEGIN_SRC emacs-lisp
  (use-package org-capture
    :general
    (leader-def
      "c" 'org-capture) 
    :config
    (setq org-tag-alist '((:startgroup . nil)
                          ("WORK" . ?w)
                          ("PERSONAL" . ?p)
                          ("ERRANDS" . ?e)
                          ("HABIT" . ?h)
                          (:endgroup . nil)
                          ("crypt" . ?c)
                          ("WATCH" . ?s)
                          ("READ" . ?r)))

    (setq org-capture-templates
          '(("n" "Note" entry (file+headline "~/org/inbox.org" "Notes")
             "* %?\n:LOGBOOK:\n- Added %U\n:END:\n%a\n")
            ("p" "Project idea" entry (file+headline "~/org/inbox.org" "Project Ideas")
             "* %?\n:LOGBOOK:\n- Added %U\n:END:\n%a\n")
            ("c" "Calendar" entry (file+olp+datetree "~/org/calendar.org" "Calendar")
             "* %?\n")
            ("j" "Journal entry" entry (file+datetree "~/org/journal.org")
             "* %<%H:%M>\n%?")
            ("m" "Email follow-up" entry (file+headline "~/org/inbox.org" "Tasks")
             "* TODO Follow up with %:fromname\nSCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"+0d\"))\n:LOGBOOK:\n- Added %U\n:END:\n%a\n%?")
            ("t" "Todo" entry (file+headline "~/org/inbox.org" "Tasks")
             "* TODO %?\nSCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"+0d\"))\n:LOGBOOK:\n- Added %U\n:END:\n%a\n"))))
#+END_SRC


#+RESULTS:
| n | Note | entry | (file+headline ~/org/inbox.org Notes) | * %? |

** Org protocol
:PROPERTIES:
:ID:       66322C9C-82D7-4782-A7FD-1BE5F40F5762
:END:
#+BEGIN_SRC emacs-lisp
  (defun my/configure-org-protocol ()
    (use-package org-protocol)
    (server-start))
#+END_SRC

#+RESULTS:
: my/configure-org-protocol
** Installation
:PROPERTIES:
:ID:       1E1326EE-5754-4744-B210-DE8503D8EF7F
:END:
#+BEGIN_SRC emacs-lisp 

  (use-package org
    :ensure org-plus-contrib
    :general
    (:states '(normal)
     :keymaps 'org-mode-map
     :prefix "SPC"
     "*" 'org-ctrl-c-star
     "a" 'org-agenda
     "ih" 'org-insert-heading-after-current-and-enter-insert
     "iH" 'org-insert-heading-and-enter-insert
     "is" 'org-insert-subheading-after-current-and-enter-insert
     "iS" 'org-insert-subheading-and-enter-insert
     "it" 'org-insert-todo-after-current-and-enter-insert
     "n" 'org-narrow-to-subtree
     "N" 'widen
     "ml" 'org-do-demote
     "mL" 'org-demote-subtree
     "mh" 'org-do-promote
     "mH" 'org-promote-subtree
     "mk" 'org-metaup
     "mj" 'org-metadown
     "s" 'org-schedule
     "t" 'org-todo)
    :config

    (my/configure-org-directories)
    (my/configure-org-exporters)
    (my/configure-org-todos)
    (my/configure-org)
    (my/configure-org-protocol)
    (my/org-babel-config)
    (setq org-inline-image-overlays t)

    (add-hook 'org-mode-hook #'my/org-mode))

  (use-package org-bullets
    :ensure t
    :hook (org-mode . org-bullets-mode))

#+END_SRC

#+RESULTS:
: t

** Archive using same hierarchy
:PROPERTIES:
:ID:       772343C0-97D9-4F35-9981-D281B7936B5D
:END:

Source: https://gist.github.com/kepi/2f4acc3cc93403c75fbba5684c5d852d.

#+BEGIN_SRC emacs-lisp
  (use-package org-archive
    :bind (:map org-mode-map
                ("C-c $" . org-archive-subtree))
    :config
    (defun org-archive-subtree-hierarchical--line-content-as-string ()
      "Returns the content of the current line as a string"
      (save-excursion
        (beginning-of-line)
        (buffer-substring-no-properties
         (line-beginning-position) (line-end-position))))

    (defun org-archive-subtree-hierarchical--org-child-list ()
      "This function returns all children of a heading as a list. "
      (interactive)
      (save-excursion
        ;; this only works with org-version > 8.0, since in previous
        ;; org-mode versions the function (org-outline-level) returns
        ;; gargabe when the point is not on a heading.
        (if (= (org-outline-level) 0)
            (outline-next-visible-heading 1)
          (org-goto-first-child))
        (let ((child-list (list (org-archive-subtree-hierarchical--line-content-as-string))))
          (while (org-goto-sibling)
            (setq child-list (cons (org-archive-subtree-hierarchical--line-content-as-string) child-list)))
          child-list)))

    (defun org-archive-subtree-hierarchical--org-struct-subtree ()
      "This function returns the tree structure in which a subtree
  belongs as a list."
      (interactive)
      (let ((archive-tree nil))
        (save-excursion
          (while (org-up-heading-safe)
            (let ((heading
                   (buffer-substring-no-properties
                    (line-beginning-position) (line-end-position))))
              (if (eq archive-tree nil)
                  (setq archive-tree (list heading))
                (setq archive-tree (cons heading archive-tree))))))
        archive-tree))

    (defun org-archive-subtree-hierarchical ()
      "This function archives a subtree hierarchical"
      (interactive)
      (let ((org-tree (org-archive-subtree-hierarchical--org-struct-subtree))
            (this-buffer (current-buffer))
            (file (abbreviate-file-name
                   (or (buffer-file-name (buffer-base-buffer))
                       (error "No file associated to buffer")))))
        (save-excursion
          (setq location org-archive-location
                afile (car (org-archive--compute-location
                            (or (org-entry-get nil "ARCHIVE" 'inherit) location)))
                ;; heading (org-extract-archive-heading location)
                infile-p (equal file (abbreviate-file-name (or afile ""))))
          (unless afile
            (error "Invalid `org-archive-location'"))
          (if (> (length afile) 0)
              (setq newfile-p (not (file-exists-p afile))
                    visiting (find-buffer-visiting afile)
                    buffer (or visiting (find-file-noselect afile)))
            (setq buffer (current-buffer)))
          (unless buffer
            (error "Cannot access file \"%s\"" afile))
          (org-cut-subtree)
          (set-buffer buffer)
          (org-mode)
          (goto-char (point-min))
          (while (not (equal org-tree nil))
            (let ((child-list (org-archive-subtree-hierarchical--org-child-list)))
              (if (member (car org-tree) child-list)
                  (progn
                    (search-forward (car org-tree) nil t)
                    (setq org-tree (cdr org-tree)))
                (progn
                  (goto-char (point-max))
                  (newline)
                  (org-insert-struct org-tree)
                  (setq org-tree nil)))))
          (newline)
          (org-yank)
          (when (not (eq this-buffer buffer))
            (save-buffer))
          (message "Subtree archived %s"
                   (concat "in file: " (abbreviate-file-name afile))))))

    (defun org-insert-struct (struct)
      "TODO"
      (interactive)
      (when struct
        (insert (car struct))
        (newline)
        (org-insert-struct (cdr struct))))

    (defun org-archive-subtree ()
      (interactive)
      (org-archive-subtree-hierarchical)
      )
    )
#+END_SRC

#+RESULTS:
: org-archive-subtree

** PlantUML
:PROPERTIES:
:ID:       3D647185-4AB2-407D-8E12-7BDD86A55D19
:END:

#+BEGIN_SRC emacs-lisp
  (use-package plantuml-mode
    :ensure t
    :config
    (setq plantuml-jar-path (expand-file-name "~/src/plantuml.jar"))
    (setq org-plantuml-jar-path plantuml-jar-path)
    (add-hook 'org-mode-hook (lambda () 
                               (add-to-list
                                'org-src-lang-modes '("plantuml" . plantuml)))))

  (add-hook 'org-babel-after-execute-hook
            (lambda ()
              (when org-inline-image-overlays
                (org-redisplay-inline-images))))
#+END_SRC

#+RESULTS:
| lambda | nil | (when org-inline-image-overlays (org-redisplay-inline-images)) |
#+RESULTS:
: t
** org-sidebar
:PROPERTIES:
:ID:       A2ED60B7-649C-4E8E-97E1-3290F85C6D21
:END:

#+begin_src emacs-lisp
  (use-package org-sidebar
    :straight t
    :general
    (leader-def :infix "o"
      "b" 'org-sidebar-backlinks)
    :after (general)
    :config
    ;; Work around https://github.com/alphapapa/org-sidebar/issues/32
    (require 'org-ql-search))
#+end_src

#+RESULTS:

** Encryption
:PROPERTIES:
:ID:       ABCC7698-8EC7-4C93-B3A3-09E8137B9C74
:END:

#+begin_src emacs-lisp
  (require 'org-crypt)
  (require 'epa-file)
  (epa-file-enable)
  (org-crypt-use-before-save-magic)
  (setq org-tags-exclude-from-inheritance (quote ("crypt")))
  (setq org-crypt-key nil)
#+end_src

#+RESULTS:

* IRC
** Circe
:PROPERTIES:
:ID:       458A884E-E64A-43B9-B9F6-2FE2C0F1A577
:END:
#+BEGIN_SRC emacs-lisp 
  (setq my-credentials-file "~/.private.el")

  (defun my/nickserv-password (_)
    (with-temp-buffer
      (insert-file-contents-literally my-credentials-file)
      (plist-get (read (buffer-string)) :nickserv-password)))

  (use-package circe
    :ensure t
    :defer t
    :config

    (setq circe-network-options
          `(("Freenode"
             :nick "landakram"
             :channels (:after-auth
                        "#emacs"
                        "#clojure"
                        "#clojure-beginners"
                        "#iphonedev"
                        "#swift-lang"
                        "#racket"
                        "#chicken"
                        "#ethereum"
                        "#ethereum-dev"
                        "#bitcoin"
                        "#bitcoin-core-dev"
                        "#ipfs"
                        "#n-o-d-e"
                        "#ruby")
             :nickserv-password ,(my/nickserv-password nil)
             :reduce-lurker-spam t)))
    (enable-circe-color-nicks))
#+END_SRC

#+RESULTS:
: t

* RSS Feeds
** elfeed
:PROPERTIES:
:ID:       04EA9AAB-8699-45FE-9A81-2D6EFB8C90C5
:END:
#+BEGIN_SRC emacs-lisp 

  (use-package elfeed
    :ensure t
    :defer t
    :config

    (setq elfeed-feeds
          '("http://lambda-the-ultimate.org/rss.xml"
            "http://planet.emacsen.org/atom.xml"
            "http://www.overcomingbias.com/feed"
            "http://slatestarcodex.com/feed/"
            "http://worrydream.com/feed.xml"
            "https://xkcd.com/rss.xml"
            "http://existentialcomics.com/rss.xml"
            "http://joshldavis.com/atom.xml"
            "https://rationalconspiracy.com/feed/"
            "https://soylentnews.org/index.rss"
            "http://meaningness.com/rss.xml"
            "http://feeds.ribbonfarm.com/Ribbonfarm"
            "http://www.cs.uni.edu/~wallingf/blog/index.xml"
            ;;"https://feeds.feedburner.com/Metafilter"
            "http://feeds.feedburner.com/thoughtsfromtheredplanet?format=xml"
            "http://www.gwern.net/atom.xml"
            "http://airspeedvelocity.net/feed/")))

#+END_SRC

#+RESULTS:
: t

** URL queue timeout
:PROPERTIES:
:ID:       AFFB4433-8921-49DE-9077-D3410216E969
:END:
This is long so that fetching feeds does not timeout.

#+BEGIN_SRC emacs-lisp 

(setq url-queue-timeout 30)

#+END_SRC
* Email
** mu4e
:PROPERTIES:
:ID:       138E42BE-4873-4D74-AA72-2DA276D3F47F
:END:

#+BEGIN_SRC emacs-lisp

    (setq mm-sign-option 'guided)

    (use-package mu4e
      :load-path "/usr/local/opt/mu/share/emacs/site-lisp/mu/mu4e"
      :commands (mu4e)
      :after general
      :config
      ;; Sync every 10 minutes
      (setq mu4e-update-interval (* 60 10))
      (setq mu4e-maildir (expand-file-name "~/Maildir"))
      (setq mu4e-compose-format-flowed t)

      ;; (setq mu4e-drafts-folder "/[Gmail].Drafts")
      ;; (setq mu4e-sent-folder   "/[Gmail].Sent Mail")
      ;; (setq mu4e-trash-folder  "/[Gmail].Trash")

      ;; don't save message to Sent Messages, GMail/IMAP will take care of this
      (setq mu4e-sent-messages-behavior 'delete)

      ;; setup some handy shortcuts
      ;; (setq mu4e-maildir-shortcuts
      ;;       '(("/INBOX"             . ?i)
      ;;         ("/[Gmail].Sent Mail" . ?s)
      ;;         ("/[Gmail].Trash"     . ?t)))

      ;; allow for updating mail using 'U' in the main view:
      (setq mu4e-get-mail-command "mbsync -a")

      (setq mu4e-change-filenames-when-moving t)

      ;; Show images
      (setq mu4e-view-show-images t)

      ;; Don't use mu4e's default HTML renderer. It's hard to read for most messages.
      (setq mu4e-html2text-command "html2text -utf8 -nobs -width 72")
      ;; Ignore mu4e's plaintext heuristic.
      ;; See https://200ok.ch/posts/2018-10-25_disable_mu4e_html_over_plain_text_heuristic.html
      (setq mu4e-view-html-plaintext-ratio-heuristic most-positive-fixnum)

      (setq mu4e-view-show-addresses t)

      (setq browse-url-generic-program 'browse-url-default-browser)

      ;; 
      (add-to-list 'mu4e-view-actions
                   '("open URL" . mu4e-view-go-to-url) t)

      (add-to-list 'mu4e-view-actions
                   '("browser (open in)" . mu4e-action-view-in-browser) t)

      (general-define-key :keymaps '(mu4e-view-mode-map)
                          "J" 'mu4e-view-headers-next
                          "K" 'mu4e-view-headers-prev)

      (setq
       user-mail-address "me@markhudnall.com"
       user-full-name  "Mark Hudnall"
       ;; message-signature
       ;;  (concat
       ;;    "Foo X. Bar\n"
       ;;    "http://www.example.com\n")
       )

      ;; sending mail -- replace USERNAME with your gmail username
      ;; also, make sure the gnutls command line utils are installed
      ;; package 'gnutls-bin' in Debian/Ubuntu, 'gnutls' in Archlinux.

      (use-package smtpmail
        :ensure t
        :config
        (setq message-send-mail-function 'smtpmail-send-it
              starttls-use-gnutls t
              smtpmail-starttls-credentials
              '(("smtp.gmail.com" 587 nil nil))
              smtpmail-auth-credentials
              (expand-file-name "~/.authinfo.gpg")
              smtpmail-default-smtp-server "smtp.gmail.com"
              smtpmail-smtp-server "smtp.gmail.com"
              smtpmail-smtp-service 587
              smtpmail-debug-info t))

      (use-package org-mu4e
        :config)

      (setq mu4e-tags '(
                        "jobs"
                        ))

      (add-to-list 'mu4e-marks
                   '(tagarchive
                     :char       "t"
                     :prompt     "tagarchive"
                     :ask-target (lambda () (completing-read "Choose a tag: " mu4e-tags))
                     :action      (lambda (docid msg target)
                                    (mu4e-action-retag-message msg (concat "+" target ",-\\Inbox"))
                                    (mu4e~proc-move docid mu4e-refile-folder))))

      (add-to-list 'mu4e-marks
                   '(tag
                     :char       "T"
                     :prompt     "tag"
                     :ask-target (lambda () (completing-read "Choose a tag: " mu4e-tags))
                     :action      (lambda (docid msg target)
                                    (mu4e-action-retag-message msg (concat "+" target)))))


      (defun mu4e-headers-mark-for-tag (args)
        "Mark header at point with tag."
        (interactive "P")
        (if args
            (mu4e-headers-mark-and-next 'tag)
            (mu4e-headers-mark-and-next 'tagarchive)))
      (general-define-key :keymaps '(mu4e-headers-mode-map)
                          "t" 'mu4e-headers-mark-for-tag)

      (setq mu4e-contexts
            `( ,(make-mu4e-context
                 :name "Personal"
                 :enter-func (lambda () (mu4e-message "Switch to the Personal context"))
                 ;; leave-func not defined
                 :match-func (lambda (msg)
                               (when msg 
                                 (mu4e-message-contact-field-matches msg 
                                                                     :to "me@markhudnall.com")))
                 :vars '((user-mail-address        . "me@markhudnall.com"  )
                         (user-full-name           . "Mark Hudnall" )
                         (mu4e-compose-reply-to-address           . "me@markhudnall.com" )
                         (mu4e-drafts-folder       . "/Personal/[Gmail]/.Drafts")
                         (mu4e-sent-folder         . "/Personal/[Gmail]/.Sent Mail")
                         (mu4e-trash-folder        . "/Personal/[Gmail]/.Trash")
                         (mu4e-refile-folder       . "/Personal/[Gmail]/.All Mail")
                         (mu4e-maildir-shortcuts   . (("/Personal/INBOX" . ?i)
                                                      ("/Personal/[Gmail]/.Sent Mail"  . ?s)
                                                      ("/Personal/[Gmail]/.All Mail"  . ?a)
                                                      ("/Personal/[Gmail]/.Trash" . ?t)))
                         (mu4e-compose-signature   . nil)))))

      ;; set `mu4e-context-policy` and `mu4e-compose-policy` to tweak when mu4e should
      ;; guess or ask the correct context, e.g.

      ;; start with the first (default) context; 
      ;; default is to ask-if-none (ask when there's no context yet, and none match)
      ;; (setq mu4e-context-policy 'pick-first)

      ;; compose with the current context is no context matches;
      ;; default is to ask 
      ;; '(setq mu4e-compose-context-policy nil)

      (add-hook 'mu4e-view-mode-hook 'visual-line-mode)
      (add-hook 'mu4e-compose-mode-hook 'flyspell-mode)
  )
#+END_SRC

#+RESULTS:
: t

* Budgeting
:PROPERTIES:
:ID:       6C7B48B1-04BA-418F-B500-B187F1DB18C4
:END:

Not actively using this right now.

#+BEGIN_SRC emacs-lisp
  (use-package ledger-mode
    :mode ("\\.ledger\\'" . ledger-mode)
    :ensure t)
#+END_SRC

#+RESULTS:
* External services (Prodigy)
:PROPERTIES:
:ID:       F950CDDF-C861-40BA-92E0-83071C5F7FCA
:END:

#+BEGIN_SRC emacs-lisp
  (use-package prodigy
    :ensure t)
#+END_SRC

Services are defined in [[*Load host specific configuration][host specific configuration files]].
* elisp utilities
** shell-command-ignore-stderr
:PROPERTIES:
:ID:       D36DA267-51F4-45EF-984D-39002C2A70D9
:END:

Like shell-command, but only returns stdout.

#+BEGIN_SRC emacs-lisp
    (defun shell-command-ignore-stderr (some-command)
      (with-output-to-string
        (with-current-buffer standard-output
          (process-file shell-file-name nil '(t nil)  nil shell-command-switch some-command))))
#+END_SRC

** request.el
:PROPERTIES:
:ID:       3178D4D4-B836-4DB7-A08A-89084EF81738
:END:

#+BEGIN_SRC emacs-lisp
  (use-package request
    :ensure t)

  (use-package request-deferred
    :ensure t)
#+END_SRC

#+RESULTS:
** Concurrency
*** deferred.el
:PROPERTIES:
:ID:       445E213C-56D4-44C6-8AC9-8B9BF3C5DBDA
:END:

#+BEGIN_SRC emacs-lisp
  (use-package deferred
    :ensure t)
#+END_SRC

#+RESULTS:

*** concurrent.el
:PROPERTIES:
:ID:       6951C8B5-10CA-4909-97A3-78BC90C04BB9
:END:

Higher level wrapper on-top of deferred.el. Interesting to play around with.

#+BEGIN_SRC emacs-lisp
  (use-package concurrent
    :ensure t)
#+END_SRC

#+RESULTS:

** String manipulation (s.el)
:PROPERTIES:
:ID:       F34F53A1-F9AB-4724-BFD9-1D832E6C1272
:END:

#+BEGIN_SRC emacs-lisp
  (use-package s
    :ensure t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defun snake-case-thing-at-point ()
    (interactive)
    (let* ((bounds (bounds-of-thing-at-point 'word))
           (start (car bounds))
           (end (cdr bounds))
           (thing (buffer-substring-no-properties start end))
           (new-thing (s-snake-case
                       (s-lower-camel-case thing))))
      (delete-region start end)
      (insert new-thing)))

  (defun camel-case-thing-at-point ()
    (interactive)
    (let* ((bounds (bounds-of-thing-at-point 'word))
           (start (car bounds))
           (end (cdr bounds))
           (thing (buffer-substring-no-properties start end))
           (new-thing (s-lower-camel-case thing)))
      (delete-region start end)
      (insert new-thing)))
#+END_SRC

#+RESULTS:
: camel-case-thing-at-point
** List manipulation (dash.el)
:PROPERTIES:
:ID:       7A38C2A2-EFD7-4581-9365-6E69BA462870
:END:

#+BEGIN_SRC emacs-lisp
  (use-package dash
    :ensure t)
#+END_SRC

#+RESULTS:

** Hash table manipulation (ht.el)
:PROPERTIES:
:ID:       D9F27FDF-D469-47ED-836F-D531585B1A78
:END:

#+BEGIN_SRC emacs-lisp
  (use-package ht
    :ensure t)
#+END_SRC

#+RESULTS:
** CSV
:PROPERTIES:
:ID:       4569B9C0-9316-40C0-9388-C2A678DDC64E
:END:

#+begin_src emacs-lisp
  (use-package parse-csv
    :straight (parse-csv :type git :host github :repo "mrc/el-csv")
    :config
    (defun csv-row-get (header row key)
      (let ((index (-find-index (-partial #'equal key) header)))
        (nth index row)))

    (defun venmo-to-ynab-row (header row)
      (let* ((memo (->> (or (csv-row-get header row "Note") "")
                        (s-collapse-whitespace)))
             (date (ignore-errors
                     (--> (csv-row-get header row "Datetime")
                          (parse-iso8601-time-string it))))
             (ynab-date (and (car date) (format-time-string "%m/%d/%Y" date)))
             (amount (-some->> (csv-row-get header row "Amount (total)")
                       (s-replace " $" "")
                       (s-replace "," "")
                       (string-to-number)))
             (inflow (when (and amount (>= amount 0))
                       (format "%0.2f" (abs amount))))
             (outflow (when (and amount (< amount 0))
                        (format "%0.2f" (abs amount))))
             (payee (if inflow
                        (csv-row-get header row "From")
                      (csv-row-get header row "To"))))
        (when (and (or inflow outflow)
                   ynab-date)
          (list ynab-date payee memo outflow inflow))))

    (defun venmo-to-ynab ()
      (interactive)
      (let* ((venmo-statement-filename (read-file-name
                                        "Venmo statement: "
                                        "~/Downloads/venmo_statement.csv"))
             (venmo-statement (--> venmo-statement-filename
                                   (with-temp-buffer
                                     (insert-file-contents it)
                                     (buffer-string))
                                   (parse-csv-string-rows it  ?\, ?\" "\n")))
             (header (car venmo-statement))
             (body (cdr venmo-statement))
             (new-body 
              (->> body
                   (mapcar (-partial #'venmo-to-ynab-row header))
                   (remove nil)))
             (new-header '("Date" "Payee" "Memo" "Outflow" "Inflow"))
             (ynab-statement-filename "~/Downloads/venmo_ynab_statement.csv"))
        (with-temp-file ynab-statement-filename
          (insert (s-join "," new-header) "\n")
          (dolist (row new-body)
            (insert (s-join "," row) "\n")))

        (let ((default-directory "~/Downloads"))
          (shell-command "open -R .")))))
#+end_src

#+RESULTS:

* Conclusion

The following will tangle this file on save. By tangling on save, I don't need to dynamically tangle on startup, which makes startup a lot faster.

;; Local Variables: 
;; eval: (add-hook 'after-save-hook (lambda ()(if (y-or-n-p "Tangle?")(org-babel-tangle))) nil t) 
;; End:
